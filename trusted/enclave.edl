enclave {

    //include "../include/common-structures.h"
    // from "TrustedLibrary/Libcxx.edl" import *;
    from "sgx_tstdc.edl" import *;
    trusted {
       
       public void ecall_setup_channel(uint64_t chan_id,int channel_type);
       public void ecall_tearup_channel(uint64_t chan_id);
       public void ecall_send_to_channel(uint64_t chan_id,[out,size=len] unsigned char* buff, size_t len);
       public void ecall_receive_from_channel(uint64_t chan_id,[in,size=len] unsigned char* buff, size_t len);


       public void ecall_enclave_init([in, size=len] unsigned char* common_run_config, size_t len); 
       public void ecall_assign_random_id([in,out, size=len] unsigned char* tr_records, size_t len); 
       public void ecall_initial_sort(); 
       public void ecall_check_for_sort_correctness();
       public void ecall_start_training();
       public void ecall_start_predicting();
       //public void ecall_singal_convolution(int size1,int size2);
       //public void ecall_matrix_mult(int row1,int col1,int row2,int col2);
       
       public void ecall_init_ptext_imgds_blocking2D(int single_size_x_bytes,int single_size_y_bytes,int total_items);
       public void ecall_init_ptext_imgds_blocking1D(int single_size_x_bytes,int single_size_y_bytes,int total_items);
       
       public void ecall_handle_gemm_cpu_first_mult(int thread_num);
       public void ecall_handle_gemm_all(int thread_num);
       public void ecall_handle_fill_cpu(int thread_num);
       public void ecall_handle_scale_cpu(int thread_num);

       public void ecall_test_long_buffer_encrypt(size_t complete_len);
       public void ecall_test_long_buffer_decrypt(size_t complete_len);

       public void ecall_NOT_SECURE_send_req_keys([in,size=cl_pksig_len]uint8_t* cl_pksig,size_t cl_pksig_len,
                                                  [in, size=cl_sksymm_len] uint8_t* cl_sksymm,size_t cl_sksymm_len,
                                                  [in,size=sgx_pksig_len]uint8_t* sgx_pksig,size_t sgx_pksig_len,
                                                  [in,size=sgx_sksig_len]uint8_t* sgx_sksig,size_t sgx_sksig_len,
                                                  [in, size=sgx_sksymm_len] uint8_t* sgx_sksymm,size_t sgx_sksymm_len);

       public void ecall_send_signed_task_config_verify([in,size=task_conf_len] uint8_t* task_conf, size_t task_conf_len);
       public void ecall_send_data_config_dsverify([in,size=ds_conf_len] uint8_t* ds_conf, size_t ds_conf_len);
       public void ecall_send_arch_cofig_verify_init([in, size=arch_conf_len] uint8_t* arch_conf_buff, size_t arch_conf_len);
    };
    untrusted {
       
       void ocall_generate_recset(int rec_set_type,
                                  [in,string] const char* name,
                                  int rec_type,
                                  [out,count=1] size_t* rec_set_id,
                                  int rec_set_gen_func);

       void ocall_get_size_rec_from_recset(size_t rec_set_id,size_t rec_id, [out,count=1] size_t* rec_size);

       void ocall_get_serialized_rec_from_recset(size_t rec_set_id,size_t rec_id,
                                                 [out,size=buff_len]uint8_t* buff,size_t buff_len);

       void ocall_setup_channel(uint64_t chan_id,int channel_type);
       void ocall_tearup_channel(uint64_t chan_id);
       void ocall_send_to_channel(uint64_t chan_id,[out,size=len] unsigned char* buff, size_t len);
       void ocall_receive_from_channel(uint64_t chan_id,[in,size=len] unsigned char* buff, size_t len);

       void ocall_load_net_config(
              [in, size = path_len] const unsigned char* path,
              size_t path_len,
              [out, size = config_len] char* config,
              size_t config_len,
              [out] unsigned int* real_len,
              [out, size = 12] unsigned char* config_iv,
              [out, size = 16] unsigned char* config_mac) transition_using_threads;

       void ocall_get_ptext_img(int loc,[out,size=len] unsigned char* buff,size_t len);
       void ocall_print_string([in, string] const char *str) transition_using_threads;
       void ocall_print_log([in, string] const char *str) transition_using_threads;
       void ocall_get_record_sort(int i, [out, size=len_i] unsigned char* tr_record_i, size_t len_i, int j, [out, size=len_j] unsigned char* tr_record_j, size_t len_j) transition_using_threads; 
       void ocall_set_record_sort(int i, [in, size=len_i] unsigned char* tr_record_i, size_t len_i, int j, [in, size=len_j] unsigned char* tr_record_j, size_t len_j) transition_using_threads;
       void ocall_get_records_encrypted(int train_or_test,size_t i, [out, size=len_i] unsigned char* tr_record_i, size_t len_i,
                                          [out,size=12] unsigned char* _iv,[out,size=16] unsigned char* _tag) transition_using_threads; 
       void ocall_set_records_encrypted(int train_or_test,size_t i, [in, size=len_i] unsigned char* tr_record_i, size_t len_i, [in,size=12] unsigned char* _iv,[in,size=16] unsigned char* _tag) transition_using_threads;
       void ocall_get_records_plain(int train_or_test,size_t i, [out, size=len_i] unsigned char* tr_record_i, size_t len_i) transition_using_threads; 
       void ocall_set_records_plain(int train_or_test,size_t i, [in, size=len_i] unsigned char* tr_record_i, size_t len_i) transition_using_threads;
       void ocall_set_timing([in, size=len] const char* time_id, size_t len , int is_it_first_call,int is_it_last_call) transition_using_threads;
       void ocall_write_block(int64_t block_id,size_t index, [in,size=len] unsigned char* buff,size_t len) transition_using_threads;
       void ocall_read_block(int64_t block_id,size_t index, [out,size=len] unsigned char* buff,size_t len) transition_using_threads;

       void ocall_handle_gemm_cpu_first_mult(int total_threads) transition_using_threads;
       void ocall_handle_gemm_all(int total_threads) transition_using_threads;
       void ocall_handle_fill_cpu(int total_threads) transition_using_threads;
       void ocall_handle_scale_cpu(int total_threads) transition_using_threads;
       
       void ocall_init_buffer_layerwise(uint32_t buff_id, size_t buff_size) transition_using_threads;
       void ocall_get_buffer_layerwise(uint32_t buff_id, uint32_t start,uint32_t end,[out,size=temp_buff_len] unsigned char* temp_buff, size_t temp_buff_len) transition_using_threads;
       void ocall_set_buffer_layerwise(uint32_t buff_id, uint32_t start,uint32_t end,[in,size=temp_buff_len] unsigned char* temp_buff, size_t temp_buff_len) transition_using_threads;

       void ocall_load_weights_plain(int start,[out,size=weight_len] unsigned char* weight_arr,size_t weight_len) transition_using_threads;
       void ocall_load_weights_encrypted(int start,[out,size=weight_len] unsigned char* weight_arr, size_t weight_len, [out, size = 12] unsigned char* weights_iv,
              [out, size = 16] unsigned char* weights_mac,int final_round) transition_using_threads;
       void ocall_store_preds_encrypted([in, size=len] unsigned char* enc_buff,size_t len,[in, size = 12] unsigned char* enc_iv, [in, size = 16] unsigned char* enc_mac) transition_using_threads;
       
       void ocall_test_long_buffer_encrypt_store(int first,int final, size_t complete_len,[in, size=enc_len]unsigned char *enc, size_t enc_len, [in, size=12]unsigned char *IV,[in,size=16]unsigned char *TAG) transition_using_threads;

       void ocall_test_long_buffer_decrypt_retrieve(int first,size_t index,[out,size=enc_len] unsigned char* enc,size_t enc_len,[out, size=12]unsigned char *IV,[out,size=16]unsigned char *TAG) transition_using_threads;

       void ocall_get_client_enc_image(uint32_t ind,[out,size=image_len] uint8_t* enc_image,size_t image_len,
              [out,size=iv_len] uint8_t* iv,size_t iv_len,
              [out,size=tag_len] uint8_t* tag,size_t tag_len,
              [out,size=aad_len] uint8_t* aad,size_t aad_len) transition_using_threads;
       
       /*void ocall_send_pub_root_seed([in,size=seed_len] uint8_t* pub_seed,size_t seed_len)  transition_using_threads;*/
       
       void ocall_add_rand_integset([in,size=enc_integ_len] uint8_t* enc_integ, size_t enc_integ_len)  transition_using_threads;
       
       void ocall_add_dec_images([in,size=dec_len] uint8_t* dec_image, size_t dec_len)  transition_using_threads;
       
       void ocall_load_dec_images(uint32_t ind, [out,size=dec_len] uint8_t* dec_image, size_t dec_len)  transition_using_threads;

       void ocall_gpu_get_iteration_seed(int iteration,
       [in, size=batch_seed_len] uint8_t* batch_seed, 
       size_t batch_seed_len,
       [in, size=layers_seed_len] uint8_t* layers_seed,size_t layers_seed_len);

       void ocall_gpu_train_report_frbv(int iteration,[out, size=report_len] uint8_t* report,size_t report_len);
       void ocall_gpu_train_report_frbmmv(int iteration,[out, size=report_len] uint8_t* report,size_t report_len);

       void ocall_save_auth_report_frbv(int iteration,[in, size=report_len] uint8_t* auth_report,size_t report_len);
       void ocall_save_auth_report_frbmmv(int iteration,[in, size=report_len] uint8_t* auth_report,size_t report_len);
       void ocall_load_auth_report(int iteration,
              [out, size=report_len] uint8_t* auth_report,
              size_t report_len,
              [out, size=mac_len] uint8_t* mac,
              size_t mac_len,
              [out, size=aad_len] uint8_t* aad,
              size_t aad_len);
       
       void ocall_load_layer_report_frbv(int iteration,int layer_index,
              size_t start,
              [out,size=buff_len] uint8_t* buff,size_t buff_len,
              [out,size=layer_sha_len] uint8_t* layer_sha,size_t layer_sha_len);

       void ocall_load_layer_report_frbmmv(int iteration,int layer_index,
              size_t start_updates,
              [out,size=buff_updates_len] uint8_t* buff_updates,size_t buff_updates_len,
              [out,size=layer_updates_sha_len] uint8_t* layer_updates_sha,size_t layer_updates_sha_len,
              size_t start_mmout,
              [out,size=layer_MM_out_len] uint8_t* layer_MM_out,size_t layer_MM_out_len,
              [out,size=lmm_shaout_len] uint8_t*lmm_shaout,size_t lmm_shaout_len,
              size_t start_prevdelta,
              [out,size=lmm_prev_delta_len] uint8_t* lmm_prev_delta,size_t lmm_prev_delta_len,
              [out,size=lmm_shapdelta_len] uint8_t*lmm_shapdelta,size_t lmm_shapdelta_len);
       
       void ocall_save_enclaves_layer_params_updates_frbv(int iteration,int layer_index,
              size_t start,
              [in,size=buff_len] uint8_t* buff,size_t buff_len,
              [in,size=aad_len] uint8_t* aad,size_t aad_len,
              [in,size=layer_cmac_len] uint8_t* layer_cmac,size_t layer_cmac_len);

       void ocall_load_enclaves_layer_params_updates_frbv(int iteration,int layer_index,
              size_t start,
              [out,size=buff_len] uint8_t* buff,size_t buff_len,
              [out,size=aad_len] uint8_t* aad,size_t aad_len,
              [out,size=layer_cmac_len] uint8_t* layer_cmac,size_t layer_cmac_len);

       void ocall_use_sgx_new_weights_momentum_grads(int iteration);
       void ocall_delete_snapshots_after_verification(int iteration);

       };
};
