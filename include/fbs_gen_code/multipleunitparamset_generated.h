// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MULTIPLEUNITPARAMSET_H_
#define FLATBUFFERS_GENERATED_MULTIPLEUNITPARAMSET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "singleunitparamset_generated.h"

struct MultipleUnitParamSet;
struct MultipleUnitParamSetBuilder;

struct MultipleUnitParamSet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MultipleUnitParamSetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOTAL_SECTIONS = 4,
    VT_SECTIONS = 6
  };
  uint32_t total_sections() const {
    return GetField<uint32_t>(VT_TOTAL_SECTIONS, 0);
  }
  bool mutate_total_sections(uint32_t _total_sections = 0) {
    return SetField<uint32_t>(VT_TOTAL_SECTIONS, _total_sections, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SingleUnitParamSet>> *sections() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SingleUnitParamSet>> *>(VT_SECTIONS);
  }
  flatbuffers::Vector<flatbuffers::Offset<SingleUnitParamSet>> *mutable_sections() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<SingleUnitParamSet>> *>(VT_SECTIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TOTAL_SECTIONS, 4) &&
           VerifyOffsetRequired(verifier, VT_SECTIONS) &&
           verifier.VerifyVector(sections()) &&
           verifier.VerifyVectorOfTables(sections()) &&
           verifier.EndTable();
  }
};

struct MultipleUnitParamSetBuilder {
  typedef MultipleUnitParamSet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_total_sections(uint32_t total_sections) {
    fbb_.AddElement<uint32_t>(MultipleUnitParamSet::VT_TOTAL_SECTIONS, total_sections, 0);
  }
  void add_sections(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SingleUnitParamSet>>> sections) {
    fbb_.AddOffset(MultipleUnitParamSet::VT_SECTIONS, sections);
  }
  explicit MultipleUnitParamSetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MultipleUnitParamSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MultipleUnitParamSet>(end);
    fbb_.Required(o, MultipleUnitParamSet::VT_SECTIONS);
    return o;
  }
};

inline flatbuffers::Offset<MultipleUnitParamSet> CreateMultipleUnitParamSet(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t total_sections = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SingleUnitParamSet>>> sections = 0) {
  MultipleUnitParamSetBuilder builder_(_fbb);
  builder_.add_sections(sections);
  builder_.add_total_sections(total_sections);
  return builder_.Finish();
}

inline flatbuffers::Offset<MultipleUnitParamSet> CreateMultipleUnitParamSetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t total_sections = 0,
    const std::vector<flatbuffers::Offset<SingleUnitParamSet>> *sections = nullptr) {
  auto sections__ = sections ? _fbb.CreateVector<flatbuffers::Offset<SingleUnitParamSet>>(*sections) : 0;
  return CreateMultipleUnitParamSet(
      _fbb,
      total_sections,
      sections__);
}

inline const MultipleUnitParamSet *GetMultipleUnitParamSet(const void *buf) {
  return flatbuffers::GetRoot<MultipleUnitParamSet>(buf);
}

inline const MultipleUnitParamSet *GetSizePrefixedMultipleUnitParamSet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MultipleUnitParamSet>(buf);
}

inline MultipleUnitParamSet *GetMutableMultipleUnitParamSet(void *buf) {
  return flatbuffers::GetMutableRoot<MultipleUnitParamSet>(buf);
}

inline MultipleUnitParamSet *GetMutableSizePrefixedMultipleUnitParamSet(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<MultipleUnitParamSet>(buf);
}

inline bool VerifyMultipleUnitParamSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MultipleUnitParamSet>(nullptr);
}

inline bool VerifySizePrefixedMultipleUnitParamSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MultipleUnitParamSet>(nullptr);
}

inline void FinishMultipleUnitParamSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MultipleUnitParamSet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMultipleUnitParamSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MultipleUnitParamSet> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MULTIPLEUNITPARAMSET_H_
