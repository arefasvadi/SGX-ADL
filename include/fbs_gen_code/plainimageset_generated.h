// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINIMAGESET_H_
#define FLATBUFFERS_GENERATED_PLAINIMAGESET_H_

#include "flatbuffers/flatbuffers.h"

struct PlainImage;
struct PlainImageT;

struct PlainImageSet;
struct PlainImageSetT;

inline const flatbuffers::TypeTable *PlainImageTypeTable();

inline const flatbuffers::TypeTable *PlainImageSetTypeTable();

struct PlainImageT : public flatbuffers::NativeTable {
  typedef PlainImage TableType;
  std::vector<float> img_content;
  PlainImageT() {
  }
};

struct PlainImage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainImageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMG_CONTENT = 4
  };
  const flatbuffers::Vector<float> *img_content() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_IMG_CONTENT);
  }
  flatbuffers::Vector<float> *mutable_img_content() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_IMG_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IMG_CONTENT) &&
           verifier.VerifyVector(img_content()) &&
           verifier.EndTable();
  }
  PlainImageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlainImageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PlainImage> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlainImageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_img_content(flatbuffers::Offset<flatbuffers::Vector<float>> img_content) {
    fbb_.AddOffset(PlainImage::VT_IMG_CONTENT, img_content);
  }
  explicit PlainImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlainImageBuilder &operator=(const PlainImageBuilder &);
  flatbuffers::Offset<PlainImage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImage>(end);
    fbb_.Required(o, PlainImage::VT_IMG_CONTENT);
    return o;
  }
};

inline flatbuffers::Offset<PlainImage> CreatePlainImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> img_content = 0) {
  PlainImageBuilder builder_(_fbb);
  builder_.add_img_content(img_content);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlainImage> CreatePlainImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *img_content = nullptr) {
  auto img_content__ = img_content ? _fbb.CreateVector<float>(*img_content) : 0;
  return CreatePlainImage(
      _fbb,
      img_content__);
}

flatbuffers::Offset<PlainImage> CreatePlainImage(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PlainImageSetT : public flatbuffers::NativeTable {
  typedef PlainImageSet TableType;
  std::vector<std::unique_ptr<PlainImageT>> images;
  PlainImageSetT() {
  }
};

struct PlainImageSet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageSetT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainImageSetTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<PlainImage>> *images() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PlainImage>> *>(VT_IMAGES);
  }
  flatbuffers::Vector<flatbuffers::Offset<PlainImage>> *mutable_images() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<PlainImage>> *>(VT_IMAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IMAGES) &&
           verifier.VerifyVector(images()) &&
           verifier.VerifyVectorOfTables(images()) &&
           verifier.EndTable();
  }
  PlainImageSetT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlainImageSetT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PlainImageSet> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageSetT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlainImageSetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_images(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PlainImage>>> images) {
    fbb_.AddOffset(PlainImageSet::VT_IMAGES, images);
  }
  explicit PlainImageSetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlainImageSetBuilder &operator=(const PlainImageSetBuilder &);
  flatbuffers::Offset<PlainImageSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImageSet>(end);
    fbb_.Required(o, PlainImageSet::VT_IMAGES);
    return o;
  }
};

inline flatbuffers::Offset<PlainImageSet> CreatePlainImageSet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PlainImage>>> images = 0) {
  PlainImageSetBuilder builder_(_fbb);
  builder_.add_images(images);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlainImageSet> CreatePlainImageSetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<PlainImage>> *images = nullptr) {
  auto images__ = images ? _fbb.CreateVector<flatbuffers::Offset<PlainImage>>(*images) : 0;
  return CreatePlainImageSet(
      _fbb,
      images__);
}

flatbuffers::Offset<PlainImageSet> CreatePlainImageSet(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageSetT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PlainImageT *PlainImage::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PlainImageT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PlainImage::UnPackTo(PlainImageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = img_content(); if (_e) { _o->img_content.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->img_content[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<PlainImage> PlainImage::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlainImage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PlainImage> CreatePlainImage(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PlainImageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _img_content = _fbb.CreateVector(_o->img_content);
  return CreatePlainImage(
      _fbb,
      _img_content);
}

inline PlainImageSetT *PlainImageSet::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PlainImageSetT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PlainImageSet::UnPackTo(PlainImageSetT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = images(); if (_e) { _o->images.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->images[_i] = std::unique_ptr<PlainImageT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<PlainImageSet> PlainImageSet::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageSetT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlainImageSet(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PlainImageSet> CreatePlainImageSet(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageSetT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PlainImageSetT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _images = _fbb.CreateVector<flatbuffers::Offset<PlainImage>> (_o->images.size(), [](size_t i, _VectorArgs *__va) { return CreatePlainImage(*__va->__fbb, __va->__o->images[i].get(), __va->__rehasher); }, &_va );
  return CreatePlainImageSet(
      _fbb,
      _images);
}

inline const flatbuffers::TypeTable *PlainImageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_FLOAT, 1, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PlainImageSetTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    PlainImageTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr
  };
  return &tt;
}

inline const PlainImageSet *GetPlainImageSet(const void *buf) {
  return flatbuffers::GetRoot<PlainImageSet>(buf);
}

inline const PlainImageSet *GetSizePrefixedPlainImageSet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainImageSet>(buf);
}

inline PlainImageSet *GetMutablePlainImageSet(void *buf) {
  return flatbuffers::GetMutableRoot<PlainImageSet>(buf);
}

inline bool VerifyPlainImageSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainImageSet>(nullptr);
}

inline bool VerifySizePrefixedPlainImageSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainImageSet>(nullptr);
}

inline void FinishPlainImageSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImageSet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainImageSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImageSet> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<PlainImageSetT> UnPackPlainImageSet(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PlainImageSetT>(GetPlainImageSet(buf)->UnPack(res));
}

inline std::unique_ptr<PlainImageSetT> UnPackSizePrefixedPlainImageSet(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PlainImageSetT>(GetSizePrefixedPlainImageSet(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_PLAINIMAGESET_H_
