// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINIMAGEMETA_H_
#define FLATBUFFERS_GENERATED_PLAINIMAGEMETA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct PlainImageMeta;
struct PlainImageMetaBuilder;

struct PlainImageMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageMetaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_CHANNELS = 8
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(int32_t _width = 0) {
    return SetField<int32_t>(VT_WIDTH, _width, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(int32_t _height = 0) {
    return SetField<int32_t>(VT_HEIGHT, _height, 0);
  }
  int32_t channels() const {
    return GetField<int32_t>(VT_CHANNELS, 0);
  }
  bool mutate_channels(int32_t _channels = 0) {
    return SetField<int32_t>(VT_CHANNELS, _channels, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_CHANNELS, 4) &&
           verifier.EndTable();
  }
};

struct PlainImageMetaBuilder {
  typedef PlainImageMeta Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(PlainImageMeta::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(PlainImageMeta::VT_HEIGHT, height, 0);
  }
  void add_channels(int32_t channels) {
    fbb_.AddElement<int32_t>(PlainImageMeta::VT_CHANNELS, channels, 0);
  }
  explicit PlainImageMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlainImageMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImageMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlainImageMeta> CreatePlainImageMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    int32_t channels = 0) {
  PlainImageMetaBuilder builder_(_fbb);
  builder_.add_channels(channels);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline const PlainImageMeta *GetPlainImageMeta(const void *buf) {
  return flatbuffers::GetRoot<PlainImageMeta>(buf);
}

inline const PlainImageMeta *GetSizePrefixedPlainImageMeta(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainImageMeta>(buf);
}

inline PlainImageMeta *GetMutablePlainImageMeta(void *buf) {
  return flatbuffers::GetMutableRoot<PlainImageMeta>(buf);
}

inline PlainImageMeta *GetMutableSizePrefixedPlainImageMeta(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<PlainImageMeta>(buf);
}

inline bool VerifyPlainImageMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainImageMeta>(nullptr);
}

inline bool VerifySizePrefixedPlainImageMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainImageMeta>(nullptr);
}

inline void FinishPlainImageMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImageMeta> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainImageMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImageMeta> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PLAINIMAGEMETA_H_
