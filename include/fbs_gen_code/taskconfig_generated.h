// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TASKCONFIG_H_
#define FLATBUFFERS_GENERATED_TASKCONFIG_H_

#include "flatbuffers/flatbuffers.h"

struct PlainImageMeta;
struct PlainImageMetaT;

struct PlainLabelMeta;
struct PlainLabelMetaT;

struct PlainImageLabelMeta;
struct PlainImageLabelMetaT;

struct DataConfig;
struct DataConfigT;

struct TrainLocationsConfigs;
struct TrainLocationsConfigsT;

struct PredictLocationsConfigs;
struct PredictLocationsConfigsT;

struct ArchConfig;
struct ArchConfigT;

struct TaskConfig;
struct TaskConfigT;

inline const flatbuffers::TypeTable *PlainImageMetaTypeTable();

inline const flatbuffers::TypeTable *PlainLabelMetaTypeTable();

inline const flatbuffers::TypeTable *PlainImageLabelMetaTypeTable();

inline const flatbuffers::TypeTable *DataConfigTypeTable();

inline const flatbuffers::TypeTable *TrainLocationsConfigsTypeTable();

inline const flatbuffers::TypeTable *PredictLocationsConfigsTypeTable();

inline const flatbuffers::TypeTable *ArchConfigTypeTable();

inline const flatbuffers::TypeTable *TaskConfigTypeTable();

enum EnumSecurityType {
  EnumSecurityType_integrity = 0,
  EnumSecurityType_privacy_integrity = 1,
  EnumSecurityType_MIN = EnumSecurityType_integrity,
  EnumSecurityType_MAX = EnumSecurityType_privacy_integrity
};

inline const EnumSecurityType (&EnumValuesEnumSecurityType())[2] {
  static const EnumSecurityType values[] = {
    EnumSecurityType_integrity,
    EnumSecurityType_privacy_integrity
  };
  return values;
}

inline const char * const *EnumNamesEnumSecurityType() {
  static const char * const names[3] = {
    "integrity",
    "privacy_integrity",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnumSecurityType(EnumSecurityType e) {
  if (e < EnumSecurityType_integrity || e > EnumSecurityType_privacy_integrity) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEnumSecurityType()[index];
}

enum EnumComputationTaskType {
  EnumComputationTaskType_training = 0,
  EnumComputationTaskType_prediction = 1,
  EnumComputationTaskType_MIN = EnumComputationTaskType_training,
  EnumComputationTaskType_MAX = EnumComputationTaskType_prediction
};

inline const EnumComputationTaskType (&EnumValuesEnumComputationTaskType())[2] {
  static const EnumComputationTaskType values[] = {
    EnumComputationTaskType_training,
    EnumComputationTaskType_prediction
  };
  return values;
}

inline const char * const *EnumNamesEnumComputationTaskType() {
  static const char * const names[3] = {
    "training",
    "prediction",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnumComputationTaskType(EnumComputationTaskType e) {
  if (e < EnumComputationTaskType_training || e > EnumComputationTaskType_prediction) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEnumComputationTaskType()[index];
}

struct PlainImageMetaT : public flatbuffers::NativeTable {
  typedef PlainImageMeta TableType;
  int32_t width;
  int32_t height;
  int32_t channels;
  PlainImageMetaT()
      : width(0),
        height(0),
        channels(0) {
  }
};

struct PlainImageMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageMetaT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainImageMetaTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_CHANNELS = 8
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(int32_t _width) {
    return SetField<int32_t>(VT_WIDTH, _width, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(int32_t _height) {
    return SetField<int32_t>(VT_HEIGHT, _height, 0);
  }
  int32_t channels() const {
    return GetField<int32_t>(VT_CHANNELS, 0);
  }
  bool mutate_channels(int32_t _channels) {
    return SetField<int32_t>(VT_CHANNELS, _channels, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           VerifyField<int32_t>(verifier, VT_CHANNELS) &&
           verifier.EndTable();
  }
  PlainImageMetaT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlainImageMetaT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PlainImageMeta> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageMetaT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlainImageMetaBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(PlainImageMeta::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(PlainImageMeta::VT_HEIGHT, height, 0);
  }
  void add_channels(int32_t channels) {
    fbb_.AddElement<int32_t>(PlainImageMeta::VT_CHANNELS, channels, 0);
  }
  explicit PlainImageMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlainImageMetaBuilder &operator=(const PlainImageMetaBuilder &);
  flatbuffers::Offset<PlainImageMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImageMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlainImageMeta> CreatePlainImageMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    int32_t channels = 0) {
  PlainImageMetaBuilder builder_(_fbb);
  builder_.add_channels(channels);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

flatbuffers::Offset<PlainImageMeta> CreatePlainImageMeta(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageMetaT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PlainLabelMetaT : public flatbuffers::NativeTable {
  typedef PlainLabelMeta TableType;
  int32_t numClasses;
  PlainLabelMetaT()
      : numClasses(0) {
  }
};

struct PlainLabelMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainLabelMetaT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainLabelMetaTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMCLASSES = 4
  };
  int32_t numClasses() const {
    return GetField<int32_t>(VT_NUMCLASSES, 0);
  }
  bool mutate_numClasses(int32_t _numClasses) {
    return SetField<int32_t>(VT_NUMCLASSES, _numClasses, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUMCLASSES) &&
           verifier.EndTable();
  }
  PlainLabelMetaT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlainLabelMetaT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PlainLabelMeta> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelMetaT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlainLabelMetaBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_numClasses(int32_t numClasses) {
    fbb_.AddElement<int32_t>(PlainLabelMeta::VT_NUMCLASSES, numClasses, 0);
  }
  explicit PlainLabelMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlainLabelMetaBuilder &operator=(const PlainLabelMetaBuilder &);
  flatbuffers::Offset<PlainLabelMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainLabelMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlainLabelMeta> CreatePlainLabelMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t numClasses = 0) {
  PlainLabelMetaBuilder builder_(_fbb);
  builder_.add_numClasses(numClasses);
  return builder_.Finish();
}

flatbuffers::Offset<PlainLabelMeta> CreatePlainLabelMeta(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelMetaT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PlainImageLabelMetaT : public flatbuffers::NativeTable {
  typedef PlainImageLabelMeta TableType;
  std::unique_ptr<PlainImageMetaT> image_meta;
  std::unique_ptr<PlainLabelMetaT> label_meta;
  PlainImageLabelMetaT() {
  }
};

struct PlainImageLabelMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageLabelMetaT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainImageLabelMetaTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGE_META = 4,
    VT_LABEL_META = 6
  };
  const PlainImageMeta *image_meta() const {
    return GetPointer<const PlainImageMeta *>(VT_IMAGE_META);
  }
  PlainImageMeta *mutable_image_meta() {
    return GetPointer<PlainImageMeta *>(VT_IMAGE_META);
  }
  const PlainLabelMeta *label_meta() const {
    return GetPointer<const PlainLabelMeta *>(VT_LABEL_META);
  }
  PlainLabelMeta *mutable_label_meta() {
    return GetPointer<PlainLabelMeta *>(VT_LABEL_META);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IMAGE_META) &&
           verifier.VerifyTable(image_meta()) &&
           VerifyOffset(verifier, VT_LABEL_META) &&
           verifier.VerifyTable(label_meta()) &&
           verifier.EndTable();
  }
  PlainImageLabelMetaT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlainImageLabelMetaT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PlainImageLabelMeta> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageLabelMetaT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlainImageLabelMetaBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_image_meta(flatbuffers::Offset<PlainImageMeta> image_meta) {
    fbb_.AddOffset(PlainImageLabelMeta::VT_IMAGE_META, image_meta);
  }
  void add_label_meta(flatbuffers::Offset<PlainLabelMeta> label_meta) {
    fbb_.AddOffset(PlainImageLabelMeta::VT_LABEL_META, label_meta);
  }
  explicit PlainImageLabelMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlainImageLabelMetaBuilder &operator=(const PlainImageLabelMetaBuilder &);
  flatbuffers::Offset<PlainImageLabelMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImageLabelMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlainImageLabelMeta> CreatePlainImageLabelMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<PlainImageMeta> image_meta = 0,
    flatbuffers::Offset<PlainLabelMeta> label_meta = 0) {
  PlainImageLabelMetaBuilder builder_(_fbb);
  builder_.add_label_meta(label_meta);
  builder_.add_image_meta(image_meta);
  return builder_.Finish();
}

flatbuffers::Offset<PlainImageLabelMeta> CreatePlainImageLabelMeta(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageLabelMetaT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DataConfigT : public flatbuffers::NativeTable {
  typedef DataConfig TableType;
  int32_t dataset_size;
  std::unique_ptr<PlainImageLabelMetaT> img_label_meta;
  std::vector<uint8_t> dataset_sha256;
  DataConfigT()
      : dataset_size(0) {
  }
};

struct DataConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataConfigT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DataConfigTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASET_SIZE = 4,
    VT_IMG_LABEL_META = 6,
    VT_DATASET_SHA256 = 8
  };
  int32_t dataset_size() const {
    return GetField<int32_t>(VT_DATASET_SIZE, 0);
  }
  bool mutate_dataset_size(int32_t _dataset_size) {
    return SetField<int32_t>(VT_DATASET_SIZE, _dataset_size, 0);
  }
  const PlainImageLabelMeta *img_label_meta() const {
    return GetPointer<const PlainImageLabelMeta *>(VT_IMG_LABEL_META);
  }
  PlainImageLabelMeta *mutable_img_label_meta() {
    return GetPointer<PlainImageLabelMeta *>(VT_IMG_LABEL_META);
  }
  const flatbuffers::Vector<uint8_t> *dataset_sha256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  flatbuffers::Vector<uint8_t> *mutable_dataset_sha256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATASET_SIZE) &&
           VerifyOffsetRequired(verifier, VT_IMG_LABEL_META) &&
           verifier.VerifyTable(img_label_meta()) &&
           VerifyOffsetRequired(verifier, VT_DATASET_SHA256) &&
           verifier.VerifyVector(dataset_sha256()) &&
           verifier.EndTable();
  }
  DataConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DataConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<DataConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DataConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DataConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataset_size(int32_t dataset_size) {
    fbb_.AddElement<int32_t>(DataConfig::VT_DATASET_SIZE, dataset_size, 0);
  }
  void add_img_label_meta(flatbuffers::Offset<PlainImageLabelMeta> img_label_meta) {
    fbb_.AddOffset(DataConfig::VT_IMG_LABEL_META, img_label_meta);
  }
  void add_dataset_sha256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256) {
    fbb_.AddOffset(DataConfig::VT_DATASET_SHA256, dataset_sha256);
  }
  explicit DataConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DataConfigBuilder &operator=(const DataConfigBuilder &);
  flatbuffers::Offset<DataConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataConfig>(end);
    fbb_.Required(o, DataConfig::VT_IMG_LABEL_META);
    fbb_.Required(o, DataConfig::VT_DATASET_SHA256);
    return o;
  }
};

inline flatbuffers::Offset<DataConfig> CreateDataConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dataset_size = 0,
    flatbuffers::Offset<PlainImageLabelMeta> img_label_meta = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256 = 0) {
  DataConfigBuilder builder_(_fbb);
  builder_.add_dataset_sha256(dataset_sha256);
  builder_.add_img_label_meta(img_label_meta);
  builder_.add_dataset_size(dataset_size);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataConfig> CreateDataConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dataset_size = 0,
    flatbuffers::Offset<PlainImageLabelMeta> img_label_meta = 0,
    const std::vector<uint8_t> *dataset_sha256 = nullptr) {
  auto dataset_sha256__ = dataset_sha256 ? _fbb.CreateVector<uint8_t>(*dataset_sha256) : 0;
  return CreateDataConfig(
      _fbb,
      dataset_size,
      img_label_meta,
      dataset_sha256__);
}

flatbuffers::Offset<DataConfig> CreateDataConfig(flatbuffers::FlatBufferBuilder &_fbb, const DataConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TrainLocationsConfigsT : public flatbuffers::NativeTable {
  typedef TrainLocationsConfigs TableType;
  std::string dataset_dir;
  std::string dec_dataset_dir;
  std::string network_arch_path;
  std::string weights_save_dir;
  std::string weights_backup_dir;
  std::string snapshot_dir;
  std::string client_pk_sig_file;
  std::string sgx_sk_sig_file;
  std::string sgx_pk_sig_file;
  std::string signed_task_config_path;
  std::string client_aes_gcm_key_file;
  std::string sgx_aes_gcm_key_file;
  std::string data_config_path;
  TrainLocationsConfigsT() {
  }
};

struct TrainLocationsConfigs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TrainLocationsConfigsT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TrainLocationsConfigsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASET_DIR = 4,
    VT_DEC_DATASET_DIR = 6,
    VT_NETWORK_ARCH_PATH = 8,
    VT_WEIGHTS_SAVE_DIR = 10,
    VT_WEIGHTS_BACKUP_DIR = 12,
    VT_SNAPSHOT_DIR = 14,
    VT_CLIENT_PK_SIG_FILE = 16,
    VT_SGX_SK_SIG_FILE = 18,
    VT_SGX_PK_SIG_FILE = 20,
    VT_SIGNED_TASK_CONFIG_PATH = 22,
    VT_CLIENT_AES_GCM_KEY_FILE = 24,
    VT_SGX_AES_GCM_KEY_FILE = 26,
    VT_DATA_CONFIG_PATH = 28
  };
  const flatbuffers::String *dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DATASET_DIR);
  }
  flatbuffers::String *mutable_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DATASET_DIR);
  }
  const flatbuffers::String *dec_dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  flatbuffers::String *mutable_dec_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  const flatbuffers::String *network_arch_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  flatbuffers::String *mutable_network_arch_path() {
    return GetPointer<flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  const flatbuffers::String *weights_save_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHTS_SAVE_DIR);
  }
  flatbuffers::String *mutable_weights_save_dir() {
    return GetPointer<flatbuffers::String *>(VT_WEIGHTS_SAVE_DIR);
  }
  const flatbuffers::String *weights_backup_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHTS_BACKUP_DIR);
  }
  flatbuffers::String *mutable_weights_backup_dir() {
    return GetPointer<flatbuffers::String *>(VT_WEIGHTS_BACKUP_DIR);
  }
  const flatbuffers::String *snapshot_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  flatbuffers::String *mutable_snapshot_dir() {
    return GetPointer<flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  const flatbuffers::String *client_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_client_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  const flatbuffers::String *sgx_sk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_sk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  const flatbuffers::String *sgx_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  const flatbuffers::String *signed_task_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  flatbuffers::String *mutable_signed_task_config_path() {
    return GetPointer<flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  const flatbuffers::String *client_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_client_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *sgx_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_sgx_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *data_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  flatbuffers::String *mutable_data_config_path() {
    return GetPointer<flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATASET_DIR) &&
           verifier.VerifyString(dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_DEC_DATASET_DIR) &&
           verifier.VerifyString(dec_dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_NETWORK_ARCH_PATH) &&
           verifier.VerifyString(network_arch_path()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHTS_SAVE_DIR) &&
           verifier.VerifyString(weights_save_dir()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHTS_BACKUP_DIR) &&
           verifier.VerifyString(weights_backup_dir()) &&
           VerifyOffsetRequired(verifier, VT_SNAPSHOT_DIR) &&
           verifier.VerifyString(snapshot_dir()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_PK_SIG_FILE) &&
           verifier.VerifyString(client_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_SK_SIG_FILE) &&
           verifier.VerifyString(sgx_sk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_PK_SIG_FILE) &&
           verifier.VerifyString(sgx_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SIGNED_TASK_CONFIG_PATH) &&
           verifier.VerifyString(signed_task_config_path()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(client_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(sgx_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_DATA_CONFIG_PATH) &&
           verifier.VerifyString(data_config_path()) &&
           verifier.EndTable();
  }
  TrainLocationsConfigsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TrainLocationsConfigsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TrainLocationsConfigs> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TrainLocationsConfigsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TrainLocationsConfigsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataset_dir(flatbuffers::Offset<flatbuffers::String> dataset_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_DATASET_DIR, dataset_dir);
  }
  void add_dec_dataset_dir(flatbuffers::Offset<flatbuffers::String> dec_dataset_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_DEC_DATASET_DIR, dec_dataset_dir);
  }
  void add_network_arch_path(flatbuffers::Offset<flatbuffers::String> network_arch_path) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_NETWORK_ARCH_PATH, network_arch_path);
  }
  void add_weights_save_dir(flatbuffers::Offset<flatbuffers::String> weights_save_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_WEIGHTS_SAVE_DIR, weights_save_dir);
  }
  void add_weights_backup_dir(flatbuffers::Offset<flatbuffers::String> weights_backup_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_WEIGHTS_BACKUP_DIR, weights_backup_dir);
  }
  void add_snapshot_dir(flatbuffers::Offset<flatbuffers::String> snapshot_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SNAPSHOT_DIR, snapshot_dir);
  }
  void add_client_pk_sig_file(flatbuffers::Offset<flatbuffers::String> client_pk_sig_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_CLIENT_PK_SIG_FILE, client_pk_sig_file);
  }
  void add_sgx_sk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SGX_SK_SIG_FILE, sgx_sk_sig_file);
  }
  void add_sgx_pk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SGX_PK_SIG_FILE, sgx_pk_sig_file);
  }
  void add_signed_task_config_path(flatbuffers::Offset<flatbuffers::String> signed_task_config_path) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH, signed_task_config_path);
  }
  void add_client_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE, client_aes_gcm_key_file);
  }
  void add_sgx_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE, sgx_aes_gcm_key_file);
  }
  void add_data_config_path(flatbuffers::Offset<flatbuffers::String> data_config_path) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_DATA_CONFIG_PATH, data_config_path);
  }
  explicit TrainLocationsConfigsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TrainLocationsConfigsBuilder &operator=(const TrainLocationsConfigsBuilder &);
  flatbuffers::Offset<TrainLocationsConfigs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TrainLocationsConfigs>(end);
    fbb_.Required(o, TrainLocationsConfigs::VT_DATASET_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_DEC_DATASET_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_NETWORK_ARCH_PATH);
    fbb_.Required(o, TrainLocationsConfigs::VT_WEIGHTS_SAVE_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_WEIGHTS_BACKUP_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_SNAPSHOT_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_CLIENT_PK_SIG_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SGX_SK_SIG_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SGX_PK_SIG_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH);
    fbb_.Required(o, TrainLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_DATA_CONFIG_PATH);
    return o;
  }
};

inline flatbuffers::Offset<TrainLocationsConfigs> CreateTrainLocationsConfigs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> dec_dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> network_arch_path = 0,
    flatbuffers::Offset<flatbuffers::String> weights_save_dir = 0,
    flatbuffers::Offset<flatbuffers::String> weights_backup_dir = 0,
    flatbuffers::Offset<flatbuffers::String> snapshot_dir = 0,
    flatbuffers::Offset<flatbuffers::String> client_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> signed_task_config_path = 0,
    flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> data_config_path = 0) {
  TrainLocationsConfigsBuilder builder_(_fbb);
  builder_.add_data_config_path(data_config_path);
  builder_.add_sgx_aes_gcm_key_file(sgx_aes_gcm_key_file);
  builder_.add_client_aes_gcm_key_file(client_aes_gcm_key_file);
  builder_.add_signed_task_config_path(signed_task_config_path);
  builder_.add_sgx_pk_sig_file(sgx_pk_sig_file);
  builder_.add_sgx_sk_sig_file(sgx_sk_sig_file);
  builder_.add_client_pk_sig_file(client_pk_sig_file);
  builder_.add_snapshot_dir(snapshot_dir);
  builder_.add_weights_backup_dir(weights_backup_dir);
  builder_.add_weights_save_dir(weights_save_dir);
  builder_.add_network_arch_path(network_arch_path);
  builder_.add_dec_dataset_dir(dec_dataset_dir);
  builder_.add_dataset_dir(dataset_dir);
  return builder_.Finish();
}

inline flatbuffers::Offset<TrainLocationsConfigs> CreateTrainLocationsConfigsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *dataset_dir = nullptr,
    const char *dec_dataset_dir = nullptr,
    const char *network_arch_path = nullptr,
    const char *weights_save_dir = nullptr,
    const char *weights_backup_dir = nullptr,
    const char *snapshot_dir = nullptr,
    const char *client_pk_sig_file = nullptr,
    const char *sgx_sk_sig_file = nullptr,
    const char *sgx_pk_sig_file = nullptr,
    const char *signed_task_config_path = nullptr,
    const char *client_aes_gcm_key_file = nullptr,
    const char *sgx_aes_gcm_key_file = nullptr,
    const char *data_config_path = nullptr) {
  auto dataset_dir__ = dataset_dir ? _fbb.CreateString(dataset_dir) : 0;
  auto dec_dataset_dir__ = dec_dataset_dir ? _fbb.CreateString(dec_dataset_dir) : 0;
  auto network_arch_path__ = network_arch_path ? _fbb.CreateString(network_arch_path) : 0;
  auto weights_save_dir__ = weights_save_dir ? _fbb.CreateString(weights_save_dir) : 0;
  auto weights_backup_dir__ = weights_backup_dir ? _fbb.CreateString(weights_backup_dir) : 0;
  auto snapshot_dir__ = snapshot_dir ? _fbb.CreateString(snapshot_dir) : 0;
  auto client_pk_sig_file__ = client_pk_sig_file ? _fbb.CreateString(client_pk_sig_file) : 0;
  auto sgx_sk_sig_file__ = sgx_sk_sig_file ? _fbb.CreateString(sgx_sk_sig_file) : 0;
  auto sgx_pk_sig_file__ = sgx_pk_sig_file ? _fbb.CreateString(sgx_pk_sig_file) : 0;
  auto signed_task_config_path__ = signed_task_config_path ? _fbb.CreateString(signed_task_config_path) : 0;
  auto client_aes_gcm_key_file__ = client_aes_gcm_key_file ? _fbb.CreateString(client_aes_gcm_key_file) : 0;
  auto sgx_aes_gcm_key_file__ = sgx_aes_gcm_key_file ? _fbb.CreateString(sgx_aes_gcm_key_file) : 0;
  auto data_config_path__ = data_config_path ? _fbb.CreateString(data_config_path) : 0;
  return CreateTrainLocationsConfigs(
      _fbb,
      dataset_dir__,
      dec_dataset_dir__,
      network_arch_path__,
      weights_save_dir__,
      weights_backup_dir__,
      snapshot_dir__,
      client_pk_sig_file__,
      sgx_sk_sig_file__,
      sgx_pk_sig_file__,
      signed_task_config_path__,
      client_aes_gcm_key_file__,
      sgx_aes_gcm_key_file__,
      data_config_path__);
}

flatbuffers::Offset<TrainLocationsConfigs> CreateTrainLocationsConfigs(flatbuffers::FlatBufferBuilder &_fbb, const TrainLocationsConfigsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PredictLocationsConfigsT : public flatbuffers::NativeTable {
  typedef PredictLocationsConfigs TableType;
  std::string dataset_dir;
  std::string dec_dataset_dir;
  std::string network_arch_path;
  std::string weights_load_dir;
  std::string preds_save_dir;
  std::string snapshot_dir;
  std::string client_pk_sig_file;
  std::string sgx_sk_sig_file;
  std::string sgx_pk_sig_file;
  std::string signed_task_config_path;
  std::string client_aes_gcm_key_file;
  std::string sgx_aes_gcm_key_file;
  std::string data_config_path;
  PredictLocationsConfigsT() {
  }
};

struct PredictLocationsConfigs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PredictLocationsConfigsT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PredictLocationsConfigsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASET_DIR = 4,
    VT_DEC_DATASET_DIR = 6,
    VT_NETWORK_ARCH_PATH = 8,
    VT_WEIGHTS_LOAD_DIR = 10,
    VT_PREDS_SAVE_DIR = 12,
    VT_SNAPSHOT_DIR = 14,
    VT_CLIENT_PK_SIG_FILE = 16,
    VT_SGX_SK_SIG_FILE = 18,
    VT_SGX_PK_SIG_FILE = 20,
    VT_SIGNED_TASK_CONFIG_PATH = 22,
    VT_CLIENT_AES_GCM_KEY_FILE = 24,
    VT_SGX_AES_GCM_KEY_FILE = 26,
    VT_DATA_CONFIG_PATH = 28
  };
  const flatbuffers::String *dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DATASET_DIR);
  }
  flatbuffers::String *mutable_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DATASET_DIR);
  }
  const flatbuffers::String *dec_dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  flatbuffers::String *mutable_dec_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  const flatbuffers::String *network_arch_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  flatbuffers::String *mutable_network_arch_path() {
    return GetPointer<flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  const flatbuffers::String *weights_load_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHTS_LOAD_DIR);
  }
  flatbuffers::String *mutable_weights_load_dir() {
    return GetPointer<flatbuffers::String *>(VT_WEIGHTS_LOAD_DIR);
  }
  const flatbuffers::String *preds_save_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_PREDS_SAVE_DIR);
  }
  flatbuffers::String *mutable_preds_save_dir() {
    return GetPointer<flatbuffers::String *>(VT_PREDS_SAVE_DIR);
  }
  const flatbuffers::String *snapshot_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  flatbuffers::String *mutable_snapshot_dir() {
    return GetPointer<flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  const flatbuffers::String *client_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_client_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  const flatbuffers::String *sgx_sk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_sk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  const flatbuffers::String *sgx_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  const flatbuffers::String *signed_task_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  flatbuffers::String *mutable_signed_task_config_path() {
    return GetPointer<flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  const flatbuffers::String *client_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_client_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *sgx_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_sgx_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *data_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  flatbuffers::String *mutable_data_config_path() {
    return GetPointer<flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATASET_DIR) &&
           verifier.VerifyString(dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_DEC_DATASET_DIR) &&
           verifier.VerifyString(dec_dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_NETWORK_ARCH_PATH) &&
           verifier.VerifyString(network_arch_path()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHTS_LOAD_DIR) &&
           verifier.VerifyString(weights_load_dir()) &&
           VerifyOffsetRequired(verifier, VT_PREDS_SAVE_DIR) &&
           verifier.VerifyString(preds_save_dir()) &&
           VerifyOffsetRequired(verifier, VT_SNAPSHOT_DIR) &&
           verifier.VerifyString(snapshot_dir()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_PK_SIG_FILE) &&
           verifier.VerifyString(client_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_SK_SIG_FILE) &&
           verifier.VerifyString(sgx_sk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_PK_SIG_FILE) &&
           verifier.VerifyString(sgx_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SIGNED_TASK_CONFIG_PATH) &&
           verifier.VerifyString(signed_task_config_path()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(client_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(sgx_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_DATA_CONFIG_PATH) &&
           verifier.VerifyString(data_config_path()) &&
           verifier.EndTable();
  }
  PredictLocationsConfigsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PredictLocationsConfigsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PredictLocationsConfigs> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PredictLocationsConfigsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PredictLocationsConfigsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataset_dir(flatbuffers::Offset<flatbuffers::String> dataset_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_DATASET_DIR, dataset_dir);
  }
  void add_dec_dataset_dir(flatbuffers::Offset<flatbuffers::String> dec_dataset_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_DEC_DATASET_DIR, dec_dataset_dir);
  }
  void add_network_arch_path(flatbuffers::Offset<flatbuffers::String> network_arch_path) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_NETWORK_ARCH_PATH, network_arch_path);
  }
  void add_weights_load_dir(flatbuffers::Offset<flatbuffers::String> weights_load_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_WEIGHTS_LOAD_DIR, weights_load_dir);
  }
  void add_preds_save_dir(flatbuffers::Offset<flatbuffers::String> preds_save_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_PREDS_SAVE_DIR, preds_save_dir);
  }
  void add_snapshot_dir(flatbuffers::Offset<flatbuffers::String> snapshot_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SNAPSHOT_DIR, snapshot_dir);
  }
  void add_client_pk_sig_file(flatbuffers::Offset<flatbuffers::String> client_pk_sig_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_CLIENT_PK_SIG_FILE, client_pk_sig_file);
  }
  void add_sgx_sk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SGX_SK_SIG_FILE, sgx_sk_sig_file);
  }
  void add_sgx_pk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SGX_PK_SIG_FILE, sgx_pk_sig_file);
  }
  void add_signed_task_config_path(flatbuffers::Offset<flatbuffers::String> signed_task_config_path) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH, signed_task_config_path);
  }
  void add_client_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE, client_aes_gcm_key_file);
  }
  void add_sgx_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE, sgx_aes_gcm_key_file);
  }
  void add_data_config_path(flatbuffers::Offset<flatbuffers::String> data_config_path) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_DATA_CONFIG_PATH, data_config_path);
  }
  explicit PredictLocationsConfigsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PredictLocationsConfigsBuilder &operator=(const PredictLocationsConfigsBuilder &);
  flatbuffers::Offset<PredictLocationsConfigs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PredictLocationsConfigs>(end);
    fbb_.Required(o, PredictLocationsConfigs::VT_DATASET_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_DEC_DATASET_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_NETWORK_ARCH_PATH);
    fbb_.Required(o, PredictLocationsConfigs::VT_WEIGHTS_LOAD_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_PREDS_SAVE_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_SNAPSHOT_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_CLIENT_PK_SIG_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SGX_SK_SIG_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SGX_PK_SIG_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH);
    fbb_.Required(o, PredictLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_DATA_CONFIG_PATH);
    return o;
  }
};

inline flatbuffers::Offset<PredictLocationsConfigs> CreatePredictLocationsConfigs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> dec_dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> network_arch_path = 0,
    flatbuffers::Offset<flatbuffers::String> weights_load_dir = 0,
    flatbuffers::Offset<flatbuffers::String> preds_save_dir = 0,
    flatbuffers::Offset<flatbuffers::String> snapshot_dir = 0,
    flatbuffers::Offset<flatbuffers::String> client_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> signed_task_config_path = 0,
    flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> data_config_path = 0) {
  PredictLocationsConfigsBuilder builder_(_fbb);
  builder_.add_data_config_path(data_config_path);
  builder_.add_sgx_aes_gcm_key_file(sgx_aes_gcm_key_file);
  builder_.add_client_aes_gcm_key_file(client_aes_gcm_key_file);
  builder_.add_signed_task_config_path(signed_task_config_path);
  builder_.add_sgx_pk_sig_file(sgx_pk_sig_file);
  builder_.add_sgx_sk_sig_file(sgx_sk_sig_file);
  builder_.add_client_pk_sig_file(client_pk_sig_file);
  builder_.add_snapshot_dir(snapshot_dir);
  builder_.add_preds_save_dir(preds_save_dir);
  builder_.add_weights_load_dir(weights_load_dir);
  builder_.add_network_arch_path(network_arch_path);
  builder_.add_dec_dataset_dir(dec_dataset_dir);
  builder_.add_dataset_dir(dataset_dir);
  return builder_.Finish();
}

inline flatbuffers::Offset<PredictLocationsConfigs> CreatePredictLocationsConfigsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *dataset_dir = nullptr,
    const char *dec_dataset_dir = nullptr,
    const char *network_arch_path = nullptr,
    const char *weights_load_dir = nullptr,
    const char *preds_save_dir = nullptr,
    const char *snapshot_dir = nullptr,
    const char *client_pk_sig_file = nullptr,
    const char *sgx_sk_sig_file = nullptr,
    const char *sgx_pk_sig_file = nullptr,
    const char *signed_task_config_path = nullptr,
    const char *client_aes_gcm_key_file = nullptr,
    const char *sgx_aes_gcm_key_file = nullptr,
    const char *data_config_path = nullptr) {
  auto dataset_dir__ = dataset_dir ? _fbb.CreateString(dataset_dir) : 0;
  auto dec_dataset_dir__ = dec_dataset_dir ? _fbb.CreateString(dec_dataset_dir) : 0;
  auto network_arch_path__ = network_arch_path ? _fbb.CreateString(network_arch_path) : 0;
  auto weights_load_dir__ = weights_load_dir ? _fbb.CreateString(weights_load_dir) : 0;
  auto preds_save_dir__ = preds_save_dir ? _fbb.CreateString(preds_save_dir) : 0;
  auto snapshot_dir__ = snapshot_dir ? _fbb.CreateString(snapshot_dir) : 0;
  auto client_pk_sig_file__ = client_pk_sig_file ? _fbb.CreateString(client_pk_sig_file) : 0;
  auto sgx_sk_sig_file__ = sgx_sk_sig_file ? _fbb.CreateString(sgx_sk_sig_file) : 0;
  auto sgx_pk_sig_file__ = sgx_pk_sig_file ? _fbb.CreateString(sgx_pk_sig_file) : 0;
  auto signed_task_config_path__ = signed_task_config_path ? _fbb.CreateString(signed_task_config_path) : 0;
  auto client_aes_gcm_key_file__ = client_aes_gcm_key_file ? _fbb.CreateString(client_aes_gcm_key_file) : 0;
  auto sgx_aes_gcm_key_file__ = sgx_aes_gcm_key_file ? _fbb.CreateString(sgx_aes_gcm_key_file) : 0;
  auto data_config_path__ = data_config_path ? _fbb.CreateString(data_config_path) : 0;
  return CreatePredictLocationsConfigs(
      _fbb,
      dataset_dir__,
      dec_dataset_dir__,
      network_arch_path__,
      weights_load_dir__,
      preds_save_dir__,
      snapshot_dir__,
      client_pk_sig_file__,
      sgx_sk_sig_file__,
      sgx_pk_sig_file__,
      signed_task_config_path__,
      client_aes_gcm_key_file__,
      sgx_aes_gcm_key_file__,
      data_config_path__);
}

flatbuffers::Offset<PredictLocationsConfigs> CreatePredictLocationsConfigs(flatbuffers::FlatBufferBuilder &_fbb, const PredictLocationsConfigsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ArchConfigT : public flatbuffers::NativeTable {
  typedef ArchConfig TableType;
  std::vector<uint8_t> contents;
  std::vector<uint8_t> network_sha_256;
  ArchConfigT() {
  }
};

struct ArchConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ArchConfigT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ArchConfigTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENTS = 4,
    VT_NETWORK_SHA_256 = 6
  };
  const flatbuffers::Vector<uint8_t> *contents() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  flatbuffers::Vector<uint8_t> *mutable_contents() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  const flatbuffers::Vector<uint8_t> *network_sha_256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_NETWORK_SHA_256);
  }
  flatbuffers::Vector<uint8_t> *mutable_network_sha_256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_NETWORK_SHA_256);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CONTENTS) &&
           verifier.VerifyVector(contents()) &&
           VerifyOffsetRequired(verifier, VT_NETWORK_SHA_256) &&
           verifier.VerifyVector(network_sha_256()) &&
           verifier.EndTable();
  }
  ArchConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ArchConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ArchConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArchConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ArchConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_contents(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> contents) {
    fbb_.AddOffset(ArchConfig::VT_CONTENTS, contents);
  }
  void add_network_sha_256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> network_sha_256) {
    fbb_.AddOffset(ArchConfig::VT_NETWORK_SHA_256, network_sha_256);
  }
  explicit ArchConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArchConfigBuilder &operator=(const ArchConfigBuilder &);
  flatbuffers::Offset<ArchConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArchConfig>(end);
    fbb_.Required(o, ArchConfig::VT_CONTENTS);
    fbb_.Required(o, ArchConfig::VT_NETWORK_SHA_256);
    return o;
  }
};

inline flatbuffers::Offset<ArchConfig> CreateArchConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> contents = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> network_sha_256 = 0) {
  ArchConfigBuilder builder_(_fbb);
  builder_.add_network_sha_256(network_sha_256);
  builder_.add_contents(contents);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArchConfig> CreateArchConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *contents = nullptr,
    const std::vector<uint8_t> *network_sha_256 = nullptr) {
  auto contents__ = contents ? _fbb.CreateVector<uint8_t>(*contents) : 0;
  auto network_sha_256__ = network_sha_256 ? _fbb.CreateVector<uint8_t>(*network_sha_256) : 0;
  return CreateArchConfig(
      _fbb,
      contents__,
      network_sha_256__);
}

flatbuffers::Offset<ArchConfig> CreateArchConfig(flatbuffers::FlatBufferBuilder &_fbb, const ArchConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TaskConfigT : public flatbuffers::NativeTable {
  typedef TaskConfig TableType;
  EnumSecurityType security_type;
  EnumComputationTaskType task_type;
  std::vector<uint8_t> arch_config_sha256;
  std::vector<uint8_t> dataset_sha256;
  int64_t pub_root_rand_seed;
  TaskConfigT()
      : security_type(EnumSecurityType_integrity),
        task_type(EnumComputationTaskType_training),
        pub_root_rand_seed(0) {
  }
};

struct TaskConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TaskConfigT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TaskConfigTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECURITY_TYPE = 4,
    VT_TASK_TYPE = 6,
    VT_ARCH_CONFIG_SHA256 = 8,
    VT_DATASET_SHA256 = 10,
    VT_PUB_ROOT_RAND_SEED = 12
  };
  EnumSecurityType security_type() const {
    return static_cast<EnumSecurityType>(GetField<int16_t>(VT_SECURITY_TYPE, 0));
  }
  bool mutate_security_type(EnumSecurityType _security_type) {
    return SetField<int16_t>(VT_SECURITY_TYPE, static_cast<int16_t>(_security_type), 0);
  }
  EnumComputationTaskType task_type() const {
    return static_cast<EnumComputationTaskType>(GetField<int16_t>(VT_TASK_TYPE, 0));
  }
  bool mutate_task_type(EnumComputationTaskType _task_type) {
    return SetField<int16_t>(VT_TASK_TYPE, static_cast<int16_t>(_task_type), 0);
  }
  const flatbuffers::Vector<uint8_t> *arch_config_sha256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ARCH_CONFIG_SHA256);
  }
  flatbuffers::Vector<uint8_t> *mutable_arch_config_sha256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_ARCH_CONFIG_SHA256);
  }
  const flatbuffers::Vector<uint8_t> *dataset_sha256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  flatbuffers::Vector<uint8_t> *mutable_dataset_sha256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  int64_t pub_root_rand_seed() const {
    return GetField<int64_t>(VT_PUB_ROOT_RAND_SEED, 0);
  }
  bool mutate_pub_root_rand_seed(int64_t _pub_root_rand_seed) {
    return SetField<int64_t>(VT_PUB_ROOT_RAND_SEED, _pub_root_rand_seed, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SECURITY_TYPE) &&
           VerifyField<int16_t>(verifier, VT_TASK_TYPE) &&
           VerifyOffsetRequired(verifier, VT_ARCH_CONFIG_SHA256) &&
           verifier.VerifyVector(arch_config_sha256()) &&
           VerifyOffsetRequired(verifier, VT_DATASET_SHA256) &&
           verifier.VerifyVector(dataset_sha256()) &&
           VerifyField<int64_t>(verifier, VT_PUB_ROOT_RAND_SEED) &&
           verifier.EndTable();
  }
  TaskConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TaskConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TaskConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TaskConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_security_type(EnumSecurityType security_type) {
    fbb_.AddElement<int16_t>(TaskConfig::VT_SECURITY_TYPE, static_cast<int16_t>(security_type), 0);
  }
  void add_task_type(EnumComputationTaskType task_type) {
    fbb_.AddElement<int16_t>(TaskConfig::VT_TASK_TYPE, static_cast<int16_t>(task_type), 0);
  }
  void add_arch_config_sha256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> arch_config_sha256) {
    fbb_.AddOffset(TaskConfig::VT_ARCH_CONFIG_SHA256, arch_config_sha256);
  }
  void add_dataset_sha256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256) {
    fbb_.AddOffset(TaskConfig::VT_DATASET_SHA256, dataset_sha256);
  }
  void add_pub_root_rand_seed(int64_t pub_root_rand_seed) {
    fbb_.AddElement<int64_t>(TaskConfig::VT_PUB_ROOT_RAND_SEED, pub_root_rand_seed, 0);
  }
  explicit TaskConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TaskConfigBuilder &operator=(const TaskConfigBuilder &);
  flatbuffers::Offset<TaskConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TaskConfig>(end);
    fbb_.Required(o, TaskConfig::VT_ARCH_CONFIG_SHA256);
    fbb_.Required(o, TaskConfig::VT_DATASET_SHA256);
    return o;
  }
};

inline flatbuffers::Offset<TaskConfig> CreateTaskConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    EnumSecurityType security_type = EnumSecurityType_integrity,
    EnumComputationTaskType task_type = EnumComputationTaskType_training,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> arch_config_sha256 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256 = 0,
    int64_t pub_root_rand_seed = 0) {
  TaskConfigBuilder builder_(_fbb);
  builder_.add_pub_root_rand_seed(pub_root_rand_seed);
  builder_.add_dataset_sha256(dataset_sha256);
  builder_.add_arch_config_sha256(arch_config_sha256);
  builder_.add_task_type(task_type);
  builder_.add_security_type(security_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<TaskConfig> CreateTaskConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    EnumSecurityType security_type = EnumSecurityType_integrity,
    EnumComputationTaskType task_type = EnumComputationTaskType_training,
    const std::vector<uint8_t> *arch_config_sha256 = nullptr,
    const std::vector<uint8_t> *dataset_sha256 = nullptr,
    int64_t pub_root_rand_seed = 0) {
  auto arch_config_sha256__ = arch_config_sha256 ? _fbb.CreateVector<uint8_t>(*arch_config_sha256) : 0;
  auto dataset_sha256__ = dataset_sha256 ? _fbb.CreateVector<uint8_t>(*dataset_sha256) : 0;
  return CreateTaskConfig(
      _fbb,
      security_type,
      task_type,
      arch_config_sha256__,
      dataset_sha256__,
      pub_root_rand_seed);
}

flatbuffers::Offset<TaskConfig> CreateTaskConfig(flatbuffers::FlatBufferBuilder &_fbb, const TaskConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PlainImageMetaT *PlainImageMeta::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PlainImageMetaT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PlainImageMeta::UnPackTo(PlainImageMetaT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
  { auto _e = channels(); _o->channels = _e; }
}

inline flatbuffers::Offset<PlainImageMeta> PlainImageMeta::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageMetaT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlainImageMeta(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PlainImageMeta> CreatePlainImageMeta(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageMetaT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PlainImageMetaT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _width = _o->width;
  auto _height = _o->height;
  auto _channels = _o->channels;
  return CreatePlainImageMeta(
      _fbb,
      _width,
      _height,
      _channels);
}

inline PlainLabelMetaT *PlainLabelMeta::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PlainLabelMetaT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PlainLabelMeta::UnPackTo(PlainLabelMetaT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = numClasses(); _o->numClasses = _e; }
}

inline flatbuffers::Offset<PlainLabelMeta> PlainLabelMeta::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelMetaT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlainLabelMeta(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PlainLabelMeta> CreatePlainLabelMeta(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelMetaT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PlainLabelMetaT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _numClasses = _o->numClasses;
  return CreatePlainLabelMeta(
      _fbb,
      _numClasses);
}

inline PlainImageLabelMetaT *PlainImageLabelMeta::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PlainImageLabelMetaT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PlainImageLabelMeta::UnPackTo(PlainImageLabelMetaT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = image_meta(); if (_e) _o->image_meta = std::unique_ptr<PlainImageMetaT>(_e->UnPack(_resolver)); }
  { auto _e = label_meta(); if (_e) _o->label_meta = std::unique_ptr<PlainLabelMetaT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<PlainImageLabelMeta> PlainImageLabelMeta::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageLabelMetaT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlainImageLabelMeta(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PlainImageLabelMeta> CreatePlainImageLabelMeta(flatbuffers::FlatBufferBuilder &_fbb, const PlainImageLabelMetaT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PlainImageLabelMetaT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _image_meta = _o->image_meta ? CreatePlainImageMeta(_fbb, _o->image_meta.get(), _rehasher) : 0;
  auto _label_meta = _o->label_meta ? CreatePlainLabelMeta(_fbb, _o->label_meta.get(), _rehasher) : 0;
  return CreatePlainImageLabelMeta(
      _fbb,
      _image_meta,
      _label_meta);
}

inline DataConfigT *DataConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new DataConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void DataConfig::UnPackTo(DataConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dataset_size(); _o->dataset_size = _e; }
  { auto _e = img_label_meta(); if (_e) _o->img_label_meta = std::unique_ptr<PlainImageLabelMetaT>(_e->UnPack(_resolver)); }
  { auto _e = dataset_sha256(); if (_e) { _o->dataset_sha256.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dataset_sha256[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<DataConfig> DataConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DataConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDataConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<DataConfig> CreateDataConfig(flatbuffers::FlatBufferBuilder &_fbb, const DataConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DataConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dataset_size = _o->dataset_size;
  auto _img_label_meta = _o->img_label_meta ? CreatePlainImageLabelMeta(_fbb, _o->img_label_meta.get(), _rehasher) : 0;
  auto _dataset_sha256 = _fbb.CreateVector(_o->dataset_sha256);
  return CreateDataConfig(
      _fbb,
      _dataset_size,
      _img_label_meta,
      _dataset_sha256);
}

inline TrainLocationsConfigsT *TrainLocationsConfigs::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TrainLocationsConfigsT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TrainLocationsConfigs::UnPackTo(TrainLocationsConfigsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dataset_dir(); if (_e) _o->dataset_dir = _e->str(); }
  { auto _e = dec_dataset_dir(); if (_e) _o->dec_dataset_dir = _e->str(); }
  { auto _e = network_arch_path(); if (_e) _o->network_arch_path = _e->str(); }
  { auto _e = weights_save_dir(); if (_e) _o->weights_save_dir = _e->str(); }
  { auto _e = weights_backup_dir(); if (_e) _o->weights_backup_dir = _e->str(); }
  { auto _e = snapshot_dir(); if (_e) _o->snapshot_dir = _e->str(); }
  { auto _e = client_pk_sig_file(); if (_e) _o->client_pk_sig_file = _e->str(); }
  { auto _e = sgx_sk_sig_file(); if (_e) _o->sgx_sk_sig_file = _e->str(); }
  { auto _e = sgx_pk_sig_file(); if (_e) _o->sgx_pk_sig_file = _e->str(); }
  { auto _e = signed_task_config_path(); if (_e) _o->signed_task_config_path = _e->str(); }
  { auto _e = client_aes_gcm_key_file(); if (_e) _o->client_aes_gcm_key_file = _e->str(); }
  { auto _e = sgx_aes_gcm_key_file(); if (_e) _o->sgx_aes_gcm_key_file = _e->str(); }
  { auto _e = data_config_path(); if (_e) _o->data_config_path = _e->str(); }
}

inline flatbuffers::Offset<TrainLocationsConfigs> TrainLocationsConfigs::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TrainLocationsConfigsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTrainLocationsConfigs(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TrainLocationsConfigs> CreateTrainLocationsConfigs(flatbuffers::FlatBufferBuilder &_fbb, const TrainLocationsConfigsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TrainLocationsConfigsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dataset_dir = _fbb.CreateString(_o->dataset_dir);
  auto _dec_dataset_dir = _fbb.CreateString(_o->dec_dataset_dir);
  auto _network_arch_path = _fbb.CreateString(_o->network_arch_path);
  auto _weights_save_dir = _fbb.CreateString(_o->weights_save_dir);
  auto _weights_backup_dir = _fbb.CreateString(_o->weights_backup_dir);
  auto _snapshot_dir = _fbb.CreateString(_o->snapshot_dir);
  auto _client_pk_sig_file = _fbb.CreateString(_o->client_pk_sig_file);
  auto _sgx_sk_sig_file = _fbb.CreateString(_o->sgx_sk_sig_file);
  auto _sgx_pk_sig_file = _fbb.CreateString(_o->sgx_pk_sig_file);
  auto _signed_task_config_path = _fbb.CreateString(_o->signed_task_config_path);
  auto _client_aes_gcm_key_file = _fbb.CreateString(_o->client_aes_gcm_key_file);
  auto _sgx_aes_gcm_key_file = _fbb.CreateString(_o->sgx_aes_gcm_key_file);
  auto _data_config_path = _fbb.CreateString(_o->data_config_path);
  return CreateTrainLocationsConfigs(
      _fbb,
      _dataset_dir,
      _dec_dataset_dir,
      _network_arch_path,
      _weights_save_dir,
      _weights_backup_dir,
      _snapshot_dir,
      _client_pk_sig_file,
      _sgx_sk_sig_file,
      _sgx_pk_sig_file,
      _signed_task_config_path,
      _client_aes_gcm_key_file,
      _sgx_aes_gcm_key_file,
      _data_config_path);
}

inline PredictLocationsConfigsT *PredictLocationsConfigs::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PredictLocationsConfigsT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PredictLocationsConfigs::UnPackTo(PredictLocationsConfigsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dataset_dir(); if (_e) _o->dataset_dir = _e->str(); }
  { auto _e = dec_dataset_dir(); if (_e) _o->dec_dataset_dir = _e->str(); }
  { auto _e = network_arch_path(); if (_e) _o->network_arch_path = _e->str(); }
  { auto _e = weights_load_dir(); if (_e) _o->weights_load_dir = _e->str(); }
  { auto _e = preds_save_dir(); if (_e) _o->preds_save_dir = _e->str(); }
  { auto _e = snapshot_dir(); if (_e) _o->snapshot_dir = _e->str(); }
  { auto _e = client_pk_sig_file(); if (_e) _o->client_pk_sig_file = _e->str(); }
  { auto _e = sgx_sk_sig_file(); if (_e) _o->sgx_sk_sig_file = _e->str(); }
  { auto _e = sgx_pk_sig_file(); if (_e) _o->sgx_pk_sig_file = _e->str(); }
  { auto _e = signed_task_config_path(); if (_e) _o->signed_task_config_path = _e->str(); }
  { auto _e = client_aes_gcm_key_file(); if (_e) _o->client_aes_gcm_key_file = _e->str(); }
  { auto _e = sgx_aes_gcm_key_file(); if (_e) _o->sgx_aes_gcm_key_file = _e->str(); }
  { auto _e = data_config_path(); if (_e) _o->data_config_path = _e->str(); }
}

inline flatbuffers::Offset<PredictLocationsConfigs> PredictLocationsConfigs::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PredictLocationsConfigsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePredictLocationsConfigs(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PredictLocationsConfigs> CreatePredictLocationsConfigs(flatbuffers::FlatBufferBuilder &_fbb, const PredictLocationsConfigsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PredictLocationsConfigsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dataset_dir = _fbb.CreateString(_o->dataset_dir);
  auto _dec_dataset_dir = _fbb.CreateString(_o->dec_dataset_dir);
  auto _network_arch_path = _fbb.CreateString(_o->network_arch_path);
  auto _weights_load_dir = _fbb.CreateString(_o->weights_load_dir);
  auto _preds_save_dir = _fbb.CreateString(_o->preds_save_dir);
  auto _snapshot_dir = _fbb.CreateString(_o->snapshot_dir);
  auto _client_pk_sig_file = _fbb.CreateString(_o->client_pk_sig_file);
  auto _sgx_sk_sig_file = _fbb.CreateString(_o->sgx_sk_sig_file);
  auto _sgx_pk_sig_file = _fbb.CreateString(_o->sgx_pk_sig_file);
  auto _signed_task_config_path = _fbb.CreateString(_o->signed_task_config_path);
  auto _client_aes_gcm_key_file = _fbb.CreateString(_o->client_aes_gcm_key_file);
  auto _sgx_aes_gcm_key_file = _fbb.CreateString(_o->sgx_aes_gcm_key_file);
  auto _data_config_path = _fbb.CreateString(_o->data_config_path);
  return CreatePredictLocationsConfigs(
      _fbb,
      _dataset_dir,
      _dec_dataset_dir,
      _network_arch_path,
      _weights_load_dir,
      _preds_save_dir,
      _snapshot_dir,
      _client_pk_sig_file,
      _sgx_sk_sig_file,
      _sgx_pk_sig_file,
      _signed_task_config_path,
      _client_aes_gcm_key_file,
      _sgx_aes_gcm_key_file,
      _data_config_path);
}

inline ArchConfigT *ArchConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ArchConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ArchConfig::UnPackTo(ArchConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = contents(); if (_e) { _o->contents.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->contents[_i] = _e->Get(_i); } } }
  { auto _e = network_sha_256(); if (_e) { _o->network_sha_256.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->network_sha_256[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<ArchConfig> ArchConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArchConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateArchConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ArchConfig> CreateArchConfig(flatbuffers::FlatBufferBuilder &_fbb, const ArchConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ArchConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _contents = _fbb.CreateVector(_o->contents);
  auto _network_sha_256 = _fbb.CreateVector(_o->network_sha_256);
  return CreateArchConfig(
      _fbb,
      _contents,
      _network_sha_256);
}

inline TaskConfigT *TaskConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TaskConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TaskConfig::UnPackTo(TaskConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = security_type(); _o->security_type = _e; }
  { auto _e = task_type(); _o->task_type = _e; }
  { auto _e = arch_config_sha256(); if (_e) { _o->arch_config_sha256.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->arch_config_sha256[_i] = _e->Get(_i); } } }
  { auto _e = dataset_sha256(); if (_e) { _o->dataset_sha256.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dataset_sha256[_i] = _e->Get(_i); } } }
  { auto _e = pub_root_rand_seed(); _o->pub_root_rand_seed = _e; }
}

inline flatbuffers::Offset<TaskConfig> TaskConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TaskConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTaskConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TaskConfig> CreateTaskConfig(flatbuffers::FlatBufferBuilder &_fbb, const TaskConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TaskConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _security_type = _o->security_type;
  auto _task_type = _o->task_type;
  auto _arch_config_sha256 = _fbb.CreateVector(_o->arch_config_sha256);
  auto _dataset_sha256 = _fbb.CreateVector(_o->dataset_sha256);
  auto _pub_root_rand_seed = _o->pub_root_rand_seed;
  return CreateTaskConfig(
      _fbb,
      _security_type,
      _task_type,
      _arch_config_sha256,
      _dataset_sha256,
      _pub_root_rand_seed);
}

inline const flatbuffers::TypeTable *EnumSecurityTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    EnumSecurityTypeTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *EnumComputationTaskTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    EnumComputationTaskTypeTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PlainImageMetaTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PlainLabelMetaTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PlainImageLabelMetaTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    PlainImageMetaTypeTable,
    PlainLabelMetaTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DataConfigTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    PlainImageLabelMetaTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TrainLocationsConfigsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 13, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PredictLocationsConfigsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 13, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ArchConfigTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TaskConfigTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_SHORT, 0, 1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_LONG, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    EnumSecurityTypeTypeTable,
    EnumComputationTaskTypeTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr
  };
  return &tt;
}

inline const TaskConfig *GetTaskConfig(const void *buf) {
  return flatbuffers::GetRoot<TaskConfig>(buf);
}

inline const TaskConfig *GetSizePrefixedTaskConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<TaskConfig>(buf);
}

inline TaskConfig *GetMutableTaskConfig(void *buf) {
  return flatbuffers::GetMutableRoot<TaskConfig>(buf);
}

inline bool VerifyTaskConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TaskConfig>(nullptr);
}

inline bool VerifySizePrefixedTaskConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TaskConfig>(nullptr);
}

inline void FinishTaskConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TaskConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTaskConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TaskConfig> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<TaskConfigT> UnPackTaskConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<TaskConfigT>(GetTaskConfig(buf)->UnPack(res));
}

inline std::unique_ptr<TaskConfigT> UnPackSizePrefixedTaskConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<TaskConfigT>(GetSizePrefixedTaskConfig(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_TASKCONFIG_H_
