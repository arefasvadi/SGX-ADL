// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TASKCONFIG_H_
#define FLATBUFFERS_GENERATED_TASKCONFIG_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "enums_generated.h"
#include "plainimagelabelmeta_generated.h"

struct DataConfig;
struct DataConfigBuilder;

struct TrainLocationsConfigs;
struct TrainLocationsConfigsBuilder;

struct PredictLocationsConfigs;
struct PredictLocationsConfigsBuilder;

struct ArchConfig;
struct ArchConfigBuilder;

struct TaskConfig;
struct TaskConfigBuilder;

struct DataConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASET_SIZE = 4,
    VT_IMG_LABEL_META = 6,
    VT_DATASET_SHA256 = 8
  };
  int32_t dataset_size() const {
    return GetField<int32_t>(VT_DATASET_SIZE, 0);
  }
  bool mutate_dataset_size(int32_t _dataset_size = 0) {
    return SetField<int32_t>(VT_DATASET_SIZE, _dataset_size, 0);
  }
  const PlainImageLabelMeta *img_label_meta() const {
    return GetPointer<const PlainImageLabelMeta *>(VT_IMG_LABEL_META);
  }
  PlainImageLabelMeta *mutable_img_label_meta() {
    return GetPointer<PlainImageLabelMeta *>(VT_IMG_LABEL_META);
  }
  const flatbuffers::Vector<uint8_t> *dataset_sha256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  flatbuffers::Vector<uint8_t> *mutable_dataset_sha256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATASET_SIZE, 4) &&
           VerifyOffsetRequired(verifier, VT_IMG_LABEL_META) &&
           verifier.VerifyTable(img_label_meta()) &&
           VerifyOffsetRequired(verifier, VT_DATASET_SHA256) &&
           verifier.VerifyVector(dataset_sha256()) &&
           verifier.EndTable();
  }
};

struct DataConfigBuilder {
  typedef DataConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataset_size(int32_t dataset_size) {
    fbb_.AddElement<int32_t>(DataConfig::VT_DATASET_SIZE, dataset_size, 0);
  }
  void add_img_label_meta(flatbuffers::Offset<PlainImageLabelMeta> img_label_meta) {
    fbb_.AddOffset(DataConfig::VT_IMG_LABEL_META, img_label_meta);
  }
  void add_dataset_sha256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256) {
    fbb_.AddOffset(DataConfig::VT_DATASET_SHA256, dataset_sha256);
  }
  explicit DataConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DataConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DataConfig>(end);
    fbb_.Required(o, DataConfig::VT_IMG_LABEL_META);
    fbb_.Required(o, DataConfig::VT_DATASET_SHA256);
    return o;
  }
};

inline flatbuffers::Offset<DataConfig> CreateDataConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dataset_size = 0,
    flatbuffers::Offset<PlainImageLabelMeta> img_label_meta = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256 = 0) {
  DataConfigBuilder builder_(_fbb);
  builder_.add_dataset_sha256(dataset_sha256);
  builder_.add_img_label_meta(img_label_meta);
  builder_.add_dataset_size(dataset_size);
  return builder_.Finish();
}

inline flatbuffers::Offset<DataConfig> CreateDataConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dataset_size = 0,
    flatbuffers::Offset<PlainImageLabelMeta> img_label_meta = 0,
    const std::vector<uint8_t> *dataset_sha256 = nullptr) {
  auto dataset_sha256__ = dataset_sha256 ? _fbb.CreateVector<uint8_t>(*dataset_sha256) : 0;
  return CreateDataConfig(
      _fbb,
      dataset_size,
      img_label_meta,
      dataset_sha256__);
}

struct TrainLocationsConfigs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TrainLocationsConfigsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASET_DIR = 4,
    VT_DEC_DATASET_DIR = 6,
    VT_NETWORK_ARCH_PATH = 8,
    VT_WEIGHTS_SAVE_DIR = 10,
    VT_WEIGHTS_BACKUP_DIR = 12,
    VT_SNAPSHOT_DIR = 14,
    VT_CLIENT_PK_SIG_FILE = 16,
    VT_SGX_SK_SIG_FILE = 18,
    VT_SGX_PK_SIG_FILE = 20,
    VT_SIGNED_TASK_CONFIG_PATH = 22,
    VT_CLIENT_AES_GCM_KEY_FILE = 24,
    VT_SGX_AES_GCM_KEY_FILE = 26,
    VT_DATA_CONFIG_PATH = 28
  };
  const flatbuffers::String *dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DATASET_DIR);
  }
  flatbuffers::String *mutable_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DATASET_DIR);
  }
  const flatbuffers::String *dec_dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  flatbuffers::String *mutable_dec_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  const flatbuffers::String *network_arch_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  flatbuffers::String *mutable_network_arch_path() {
    return GetPointer<flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  const flatbuffers::String *weights_save_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHTS_SAVE_DIR);
  }
  flatbuffers::String *mutable_weights_save_dir() {
    return GetPointer<flatbuffers::String *>(VT_WEIGHTS_SAVE_DIR);
  }
  const flatbuffers::String *weights_backup_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHTS_BACKUP_DIR);
  }
  flatbuffers::String *mutable_weights_backup_dir() {
    return GetPointer<flatbuffers::String *>(VT_WEIGHTS_BACKUP_DIR);
  }
  const flatbuffers::String *snapshot_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  flatbuffers::String *mutable_snapshot_dir() {
    return GetPointer<flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  const flatbuffers::String *client_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_client_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  const flatbuffers::String *sgx_sk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_sk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  const flatbuffers::String *sgx_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  const flatbuffers::String *signed_task_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  flatbuffers::String *mutable_signed_task_config_path() {
    return GetPointer<flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  const flatbuffers::String *client_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_client_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *sgx_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_sgx_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *data_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  flatbuffers::String *mutable_data_config_path() {
    return GetPointer<flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATASET_DIR) &&
           verifier.VerifyString(dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_DEC_DATASET_DIR) &&
           verifier.VerifyString(dec_dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_NETWORK_ARCH_PATH) &&
           verifier.VerifyString(network_arch_path()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHTS_SAVE_DIR) &&
           verifier.VerifyString(weights_save_dir()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHTS_BACKUP_DIR) &&
           verifier.VerifyString(weights_backup_dir()) &&
           VerifyOffsetRequired(verifier, VT_SNAPSHOT_DIR) &&
           verifier.VerifyString(snapshot_dir()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_PK_SIG_FILE) &&
           verifier.VerifyString(client_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_SK_SIG_FILE) &&
           verifier.VerifyString(sgx_sk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_PK_SIG_FILE) &&
           verifier.VerifyString(sgx_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SIGNED_TASK_CONFIG_PATH) &&
           verifier.VerifyString(signed_task_config_path()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(client_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(sgx_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_DATA_CONFIG_PATH) &&
           verifier.VerifyString(data_config_path()) &&
           verifier.EndTable();
  }
};

struct TrainLocationsConfigsBuilder {
  typedef TrainLocationsConfigs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataset_dir(flatbuffers::Offset<flatbuffers::String> dataset_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_DATASET_DIR, dataset_dir);
  }
  void add_dec_dataset_dir(flatbuffers::Offset<flatbuffers::String> dec_dataset_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_DEC_DATASET_DIR, dec_dataset_dir);
  }
  void add_network_arch_path(flatbuffers::Offset<flatbuffers::String> network_arch_path) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_NETWORK_ARCH_PATH, network_arch_path);
  }
  void add_weights_save_dir(flatbuffers::Offset<flatbuffers::String> weights_save_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_WEIGHTS_SAVE_DIR, weights_save_dir);
  }
  void add_weights_backup_dir(flatbuffers::Offset<flatbuffers::String> weights_backup_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_WEIGHTS_BACKUP_DIR, weights_backup_dir);
  }
  void add_snapshot_dir(flatbuffers::Offset<flatbuffers::String> snapshot_dir) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SNAPSHOT_DIR, snapshot_dir);
  }
  void add_client_pk_sig_file(flatbuffers::Offset<flatbuffers::String> client_pk_sig_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_CLIENT_PK_SIG_FILE, client_pk_sig_file);
  }
  void add_sgx_sk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SGX_SK_SIG_FILE, sgx_sk_sig_file);
  }
  void add_sgx_pk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SGX_PK_SIG_FILE, sgx_pk_sig_file);
  }
  void add_signed_task_config_path(flatbuffers::Offset<flatbuffers::String> signed_task_config_path) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH, signed_task_config_path);
  }
  void add_client_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE, client_aes_gcm_key_file);
  }
  void add_sgx_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE, sgx_aes_gcm_key_file);
  }
  void add_data_config_path(flatbuffers::Offset<flatbuffers::String> data_config_path) {
    fbb_.AddOffset(TrainLocationsConfigs::VT_DATA_CONFIG_PATH, data_config_path);
  }
  explicit TrainLocationsConfigsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TrainLocationsConfigs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TrainLocationsConfigs>(end);
    fbb_.Required(o, TrainLocationsConfigs::VT_DATASET_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_DEC_DATASET_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_NETWORK_ARCH_PATH);
    fbb_.Required(o, TrainLocationsConfigs::VT_WEIGHTS_SAVE_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_WEIGHTS_BACKUP_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_SNAPSHOT_DIR);
    fbb_.Required(o, TrainLocationsConfigs::VT_CLIENT_PK_SIG_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SGX_SK_SIG_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SGX_PK_SIG_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH);
    fbb_.Required(o, TrainLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE);
    fbb_.Required(o, TrainLocationsConfigs::VT_DATA_CONFIG_PATH);
    return o;
  }
};

inline flatbuffers::Offset<TrainLocationsConfigs> CreateTrainLocationsConfigs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> dec_dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> network_arch_path = 0,
    flatbuffers::Offset<flatbuffers::String> weights_save_dir = 0,
    flatbuffers::Offset<flatbuffers::String> weights_backup_dir = 0,
    flatbuffers::Offset<flatbuffers::String> snapshot_dir = 0,
    flatbuffers::Offset<flatbuffers::String> client_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> signed_task_config_path = 0,
    flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> data_config_path = 0) {
  TrainLocationsConfigsBuilder builder_(_fbb);
  builder_.add_data_config_path(data_config_path);
  builder_.add_sgx_aes_gcm_key_file(sgx_aes_gcm_key_file);
  builder_.add_client_aes_gcm_key_file(client_aes_gcm_key_file);
  builder_.add_signed_task_config_path(signed_task_config_path);
  builder_.add_sgx_pk_sig_file(sgx_pk_sig_file);
  builder_.add_sgx_sk_sig_file(sgx_sk_sig_file);
  builder_.add_client_pk_sig_file(client_pk_sig_file);
  builder_.add_snapshot_dir(snapshot_dir);
  builder_.add_weights_backup_dir(weights_backup_dir);
  builder_.add_weights_save_dir(weights_save_dir);
  builder_.add_network_arch_path(network_arch_path);
  builder_.add_dec_dataset_dir(dec_dataset_dir);
  builder_.add_dataset_dir(dataset_dir);
  return builder_.Finish();
}

inline flatbuffers::Offset<TrainLocationsConfigs> CreateTrainLocationsConfigsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *dataset_dir = nullptr,
    const char *dec_dataset_dir = nullptr,
    const char *network_arch_path = nullptr,
    const char *weights_save_dir = nullptr,
    const char *weights_backup_dir = nullptr,
    const char *snapshot_dir = nullptr,
    const char *client_pk_sig_file = nullptr,
    const char *sgx_sk_sig_file = nullptr,
    const char *sgx_pk_sig_file = nullptr,
    const char *signed_task_config_path = nullptr,
    const char *client_aes_gcm_key_file = nullptr,
    const char *sgx_aes_gcm_key_file = nullptr,
    const char *data_config_path = nullptr) {
  auto dataset_dir__ = dataset_dir ? _fbb.CreateString(dataset_dir) : 0;
  auto dec_dataset_dir__ = dec_dataset_dir ? _fbb.CreateString(dec_dataset_dir) : 0;
  auto network_arch_path__ = network_arch_path ? _fbb.CreateString(network_arch_path) : 0;
  auto weights_save_dir__ = weights_save_dir ? _fbb.CreateString(weights_save_dir) : 0;
  auto weights_backup_dir__ = weights_backup_dir ? _fbb.CreateString(weights_backup_dir) : 0;
  auto snapshot_dir__ = snapshot_dir ? _fbb.CreateString(snapshot_dir) : 0;
  auto client_pk_sig_file__ = client_pk_sig_file ? _fbb.CreateString(client_pk_sig_file) : 0;
  auto sgx_sk_sig_file__ = sgx_sk_sig_file ? _fbb.CreateString(sgx_sk_sig_file) : 0;
  auto sgx_pk_sig_file__ = sgx_pk_sig_file ? _fbb.CreateString(sgx_pk_sig_file) : 0;
  auto signed_task_config_path__ = signed_task_config_path ? _fbb.CreateString(signed_task_config_path) : 0;
  auto client_aes_gcm_key_file__ = client_aes_gcm_key_file ? _fbb.CreateString(client_aes_gcm_key_file) : 0;
  auto sgx_aes_gcm_key_file__ = sgx_aes_gcm_key_file ? _fbb.CreateString(sgx_aes_gcm_key_file) : 0;
  auto data_config_path__ = data_config_path ? _fbb.CreateString(data_config_path) : 0;
  return CreateTrainLocationsConfigs(
      _fbb,
      dataset_dir__,
      dec_dataset_dir__,
      network_arch_path__,
      weights_save_dir__,
      weights_backup_dir__,
      snapshot_dir__,
      client_pk_sig_file__,
      sgx_sk_sig_file__,
      sgx_pk_sig_file__,
      signed_task_config_path__,
      client_aes_gcm_key_file__,
      sgx_aes_gcm_key_file__,
      data_config_path__);
}

struct PredictLocationsConfigs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PredictLocationsConfigsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASET_DIR = 4,
    VT_DEC_DATASET_DIR = 6,
    VT_NETWORK_ARCH_PATH = 8,
    VT_WEIGHTS_LOAD_DIR = 10,
    VT_PREDS_SAVE_DIR = 12,
    VT_SNAPSHOT_DIR = 14,
    VT_CLIENT_PK_SIG_FILE = 16,
    VT_SGX_SK_SIG_FILE = 18,
    VT_SGX_PK_SIG_FILE = 20,
    VT_SIGNED_TASK_CONFIG_PATH = 22,
    VT_CLIENT_AES_GCM_KEY_FILE = 24,
    VT_SGX_AES_GCM_KEY_FILE = 26,
    VT_DATA_CONFIG_PATH = 28
  };
  const flatbuffers::String *dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DATASET_DIR);
  }
  flatbuffers::String *mutable_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DATASET_DIR);
  }
  const flatbuffers::String *dec_dataset_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  flatbuffers::String *mutable_dec_dataset_dir() {
    return GetPointer<flatbuffers::String *>(VT_DEC_DATASET_DIR);
  }
  const flatbuffers::String *network_arch_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  flatbuffers::String *mutable_network_arch_path() {
    return GetPointer<flatbuffers::String *>(VT_NETWORK_ARCH_PATH);
  }
  const flatbuffers::String *weights_load_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHTS_LOAD_DIR);
  }
  flatbuffers::String *mutable_weights_load_dir() {
    return GetPointer<flatbuffers::String *>(VT_WEIGHTS_LOAD_DIR);
  }
  const flatbuffers::String *preds_save_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_PREDS_SAVE_DIR);
  }
  flatbuffers::String *mutable_preds_save_dir() {
    return GetPointer<flatbuffers::String *>(VT_PREDS_SAVE_DIR);
  }
  const flatbuffers::String *snapshot_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  flatbuffers::String *mutable_snapshot_dir() {
    return GetPointer<flatbuffers::String *>(VT_SNAPSHOT_DIR);
  }
  const flatbuffers::String *client_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_client_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_PK_SIG_FILE);
  }
  const flatbuffers::String *sgx_sk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_sk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_SK_SIG_FILE);
  }
  const flatbuffers::String *sgx_pk_sig_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  flatbuffers::String *mutable_sgx_pk_sig_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_PK_SIG_FILE);
  }
  const flatbuffers::String *signed_task_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  flatbuffers::String *mutable_signed_task_config_path() {
    return GetPointer<flatbuffers::String *>(VT_SIGNED_TASK_CONFIG_PATH);
  }
  const flatbuffers::String *client_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_client_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_CLIENT_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *sgx_aes_gcm_key_file() const {
    return GetPointer<const flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  flatbuffers::String *mutable_sgx_aes_gcm_key_file() {
    return GetPointer<flatbuffers::String *>(VT_SGX_AES_GCM_KEY_FILE);
  }
  const flatbuffers::String *data_config_path() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  flatbuffers::String *mutable_data_config_path() {
    return GetPointer<flatbuffers::String *>(VT_DATA_CONFIG_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DATASET_DIR) &&
           verifier.VerifyString(dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_DEC_DATASET_DIR) &&
           verifier.VerifyString(dec_dataset_dir()) &&
           VerifyOffsetRequired(verifier, VT_NETWORK_ARCH_PATH) &&
           verifier.VerifyString(network_arch_path()) &&
           VerifyOffsetRequired(verifier, VT_WEIGHTS_LOAD_DIR) &&
           verifier.VerifyString(weights_load_dir()) &&
           VerifyOffsetRequired(verifier, VT_PREDS_SAVE_DIR) &&
           verifier.VerifyString(preds_save_dir()) &&
           VerifyOffsetRequired(verifier, VT_SNAPSHOT_DIR) &&
           verifier.VerifyString(snapshot_dir()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_PK_SIG_FILE) &&
           verifier.VerifyString(client_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_SK_SIG_FILE) &&
           verifier.VerifyString(sgx_sk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_PK_SIG_FILE) &&
           verifier.VerifyString(sgx_pk_sig_file()) &&
           VerifyOffsetRequired(verifier, VT_SIGNED_TASK_CONFIG_PATH) &&
           verifier.VerifyString(signed_task_config_path()) &&
           VerifyOffsetRequired(verifier, VT_CLIENT_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(client_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_SGX_AES_GCM_KEY_FILE) &&
           verifier.VerifyString(sgx_aes_gcm_key_file()) &&
           VerifyOffsetRequired(verifier, VT_DATA_CONFIG_PATH) &&
           verifier.VerifyString(data_config_path()) &&
           verifier.EndTable();
  }
};

struct PredictLocationsConfigsBuilder {
  typedef PredictLocationsConfigs Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataset_dir(flatbuffers::Offset<flatbuffers::String> dataset_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_DATASET_DIR, dataset_dir);
  }
  void add_dec_dataset_dir(flatbuffers::Offset<flatbuffers::String> dec_dataset_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_DEC_DATASET_DIR, dec_dataset_dir);
  }
  void add_network_arch_path(flatbuffers::Offset<flatbuffers::String> network_arch_path) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_NETWORK_ARCH_PATH, network_arch_path);
  }
  void add_weights_load_dir(flatbuffers::Offset<flatbuffers::String> weights_load_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_WEIGHTS_LOAD_DIR, weights_load_dir);
  }
  void add_preds_save_dir(flatbuffers::Offset<flatbuffers::String> preds_save_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_PREDS_SAVE_DIR, preds_save_dir);
  }
  void add_snapshot_dir(flatbuffers::Offset<flatbuffers::String> snapshot_dir) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SNAPSHOT_DIR, snapshot_dir);
  }
  void add_client_pk_sig_file(flatbuffers::Offset<flatbuffers::String> client_pk_sig_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_CLIENT_PK_SIG_FILE, client_pk_sig_file);
  }
  void add_sgx_sk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SGX_SK_SIG_FILE, sgx_sk_sig_file);
  }
  void add_sgx_pk_sig_file(flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SGX_PK_SIG_FILE, sgx_pk_sig_file);
  }
  void add_signed_task_config_path(flatbuffers::Offset<flatbuffers::String> signed_task_config_path) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH, signed_task_config_path);
  }
  void add_client_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE, client_aes_gcm_key_file);
  }
  void add_sgx_aes_gcm_key_file(flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE, sgx_aes_gcm_key_file);
  }
  void add_data_config_path(flatbuffers::Offset<flatbuffers::String> data_config_path) {
    fbb_.AddOffset(PredictLocationsConfigs::VT_DATA_CONFIG_PATH, data_config_path);
  }
  explicit PredictLocationsConfigsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PredictLocationsConfigs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PredictLocationsConfigs>(end);
    fbb_.Required(o, PredictLocationsConfigs::VT_DATASET_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_DEC_DATASET_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_NETWORK_ARCH_PATH);
    fbb_.Required(o, PredictLocationsConfigs::VT_WEIGHTS_LOAD_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_PREDS_SAVE_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_SNAPSHOT_DIR);
    fbb_.Required(o, PredictLocationsConfigs::VT_CLIENT_PK_SIG_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SGX_SK_SIG_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SGX_PK_SIG_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SIGNED_TASK_CONFIG_PATH);
    fbb_.Required(o, PredictLocationsConfigs::VT_CLIENT_AES_GCM_KEY_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_SGX_AES_GCM_KEY_FILE);
    fbb_.Required(o, PredictLocationsConfigs::VT_DATA_CONFIG_PATH);
    return o;
  }
};

inline flatbuffers::Offset<PredictLocationsConfigs> CreatePredictLocationsConfigs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> dec_dataset_dir = 0,
    flatbuffers::Offset<flatbuffers::String> network_arch_path = 0,
    flatbuffers::Offset<flatbuffers::String> weights_load_dir = 0,
    flatbuffers::Offset<flatbuffers::String> preds_save_dir = 0,
    flatbuffers::Offset<flatbuffers::String> snapshot_dir = 0,
    flatbuffers::Offset<flatbuffers::String> client_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_sk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_pk_sig_file = 0,
    flatbuffers::Offset<flatbuffers::String> signed_task_config_path = 0,
    flatbuffers::Offset<flatbuffers::String> client_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> sgx_aes_gcm_key_file = 0,
    flatbuffers::Offset<flatbuffers::String> data_config_path = 0) {
  PredictLocationsConfigsBuilder builder_(_fbb);
  builder_.add_data_config_path(data_config_path);
  builder_.add_sgx_aes_gcm_key_file(sgx_aes_gcm_key_file);
  builder_.add_client_aes_gcm_key_file(client_aes_gcm_key_file);
  builder_.add_signed_task_config_path(signed_task_config_path);
  builder_.add_sgx_pk_sig_file(sgx_pk_sig_file);
  builder_.add_sgx_sk_sig_file(sgx_sk_sig_file);
  builder_.add_client_pk_sig_file(client_pk_sig_file);
  builder_.add_snapshot_dir(snapshot_dir);
  builder_.add_preds_save_dir(preds_save_dir);
  builder_.add_weights_load_dir(weights_load_dir);
  builder_.add_network_arch_path(network_arch_path);
  builder_.add_dec_dataset_dir(dec_dataset_dir);
  builder_.add_dataset_dir(dataset_dir);
  return builder_.Finish();
}

inline flatbuffers::Offset<PredictLocationsConfigs> CreatePredictLocationsConfigsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *dataset_dir = nullptr,
    const char *dec_dataset_dir = nullptr,
    const char *network_arch_path = nullptr,
    const char *weights_load_dir = nullptr,
    const char *preds_save_dir = nullptr,
    const char *snapshot_dir = nullptr,
    const char *client_pk_sig_file = nullptr,
    const char *sgx_sk_sig_file = nullptr,
    const char *sgx_pk_sig_file = nullptr,
    const char *signed_task_config_path = nullptr,
    const char *client_aes_gcm_key_file = nullptr,
    const char *sgx_aes_gcm_key_file = nullptr,
    const char *data_config_path = nullptr) {
  auto dataset_dir__ = dataset_dir ? _fbb.CreateString(dataset_dir) : 0;
  auto dec_dataset_dir__ = dec_dataset_dir ? _fbb.CreateString(dec_dataset_dir) : 0;
  auto network_arch_path__ = network_arch_path ? _fbb.CreateString(network_arch_path) : 0;
  auto weights_load_dir__ = weights_load_dir ? _fbb.CreateString(weights_load_dir) : 0;
  auto preds_save_dir__ = preds_save_dir ? _fbb.CreateString(preds_save_dir) : 0;
  auto snapshot_dir__ = snapshot_dir ? _fbb.CreateString(snapshot_dir) : 0;
  auto client_pk_sig_file__ = client_pk_sig_file ? _fbb.CreateString(client_pk_sig_file) : 0;
  auto sgx_sk_sig_file__ = sgx_sk_sig_file ? _fbb.CreateString(sgx_sk_sig_file) : 0;
  auto sgx_pk_sig_file__ = sgx_pk_sig_file ? _fbb.CreateString(sgx_pk_sig_file) : 0;
  auto signed_task_config_path__ = signed_task_config_path ? _fbb.CreateString(signed_task_config_path) : 0;
  auto client_aes_gcm_key_file__ = client_aes_gcm_key_file ? _fbb.CreateString(client_aes_gcm_key_file) : 0;
  auto sgx_aes_gcm_key_file__ = sgx_aes_gcm_key_file ? _fbb.CreateString(sgx_aes_gcm_key_file) : 0;
  auto data_config_path__ = data_config_path ? _fbb.CreateString(data_config_path) : 0;
  return CreatePredictLocationsConfigs(
      _fbb,
      dataset_dir__,
      dec_dataset_dir__,
      network_arch_path__,
      weights_load_dir__,
      preds_save_dir__,
      snapshot_dir__,
      client_pk_sig_file__,
      sgx_sk_sig_file__,
      sgx_pk_sig_file__,
      signed_task_config_path__,
      client_aes_gcm_key_file__,
      sgx_aes_gcm_key_file__,
      data_config_path__);
}

struct ArchConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ArchConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENTS = 4,
    VT_NETWORK_SHA_256 = 6
  };
  const flatbuffers::Vector<uint8_t> *contents() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  flatbuffers::Vector<uint8_t> *mutable_contents() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CONTENTS);
  }
  const flatbuffers::Vector<uint8_t> *network_sha_256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_NETWORK_SHA_256);
  }
  flatbuffers::Vector<uint8_t> *mutable_network_sha_256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_NETWORK_SHA_256);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CONTENTS) &&
           verifier.VerifyVector(contents()) &&
           VerifyOffsetRequired(verifier, VT_NETWORK_SHA_256) &&
           verifier.VerifyVector(network_sha_256()) &&
           verifier.EndTable();
  }
};

struct ArchConfigBuilder {
  typedef ArchConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_contents(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> contents) {
    fbb_.AddOffset(ArchConfig::VT_CONTENTS, contents);
  }
  void add_network_sha_256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> network_sha_256) {
    fbb_.AddOffset(ArchConfig::VT_NETWORK_SHA_256, network_sha_256);
  }
  explicit ArchConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ArchConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArchConfig>(end);
    fbb_.Required(o, ArchConfig::VT_CONTENTS);
    fbb_.Required(o, ArchConfig::VT_NETWORK_SHA_256);
    return o;
  }
};

inline flatbuffers::Offset<ArchConfig> CreateArchConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> contents = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> network_sha_256 = 0) {
  ArchConfigBuilder builder_(_fbb);
  builder_.add_network_sha_256(network_sha_256);
  builder_.add_contents(contents);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArchConfig> CreateArchConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *contents = nullptr,
    const std::vector<uint8_t> *network_sha_256 = nullptr) {
  auto contents__ = contents ? _fbb.CreateVector<uint8_t>(*contents) : 0;
  auto network_sha_256__ = network_sha_256 ? _fbb.CreateVector<uint8_t>(*network_sha_256) : 0;
  return CreateArchConfig(
      _fbb,
      contents__,
      network_sha_256__);
}

struct TaskConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TaskConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECURITY_TYPE = 4,
    VT_TASK_TYPE = 6,
    VT_ARCH_CONFIG_SHA256 = 8,
    VT_DATASET_SHA256 = 10,
    VT_PUB_ROOT_RAND_SEED = 12
  };
  EnumSecurityType security_type() const {
    return static_cast<EnumSecurityType>(GetField<int16_t>(VT_SECURITY_TYPE, 0));
  }
  bool mutate_security_type(EnumSecurityType _security_type = static_cast<EnumSecurityType>(0)) {
    return SetField<int16_t>(VT_SECURITY_TYPE, static_cast<int16_t>(_security_type), 0);
  }
  EnumComputationTaskType task_type() const {
    return static_cast<EnumComputationTaskType>(GetField<int16_t>(VT_TASK_TYPE, 0));
  }
  bool mutate_task_type(EnumComputationTaskType _task_type = static_cast<EnumComputationTaskType>(0)) {
    return SetField<int16_t>(VT_TASK_TYPE, static_cast<int16_t>(_task_type), 0);
  }
  const flatbuffers::Vector<uint8_t> *arch_config_sha256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ARCH_CONFIG_SHA256);
  }
  flatbuffers::Vector<uint8_t> *mutable_arch_config_sha256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_ARCH_CONFIG_SHA256);
  }
  const flatbuffers::Vector<uint8_t> *dataset_sha256() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  flatbuffers::Vector<uint8_t> *mutable_dataset_sha256() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATASET_SHA256);
  }
  int64_t pub_root_rand_seed() const {
    return GetField<int64_t>(VT_PUB_ROOT_RAND_SEED, 0);
  }
  bool mutate_pub_root_rand_seed(int64_t _pub_root_rand_seed = 0) {
    return SetField<int64_t>(VT_PUB_ROOT_RAND_SEED, _pub_root_rand_seed, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SECURITY_TYPE, 2) &&
           VerifyField<int16_t>(verifier, VT_TASK_TYPE, 2) &&
           VerifyOffsetRequired(verifier, VT_ARCH_CONFIG_SHA256) &&
           verifier.VerifyVector(arch_config_sha256()) &&
           VerifyOffsetRequired(verifier, VT_DATASET_SHA256) &&
           verifier.VerifyVector(dataset_sha256()) &&
           VerifyField<int64_t>(verifier, VT_PUB_ROOT_RAND_SEED, 8) &&
           verifier.EndTable();
  }
};

struct TaskConfigBuilder {
  typedef TaskConfig Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_security_type(EnumSecurityType security_type) {
    fbb_.AddElement<int16_t>(TaskConfig::VT_SECURITY_TYPE, static_cast<int16_t>(security_type), 0);
  }
  void add_task_type(EnumComputationTaskType task_type) {
    fbb_.AddElement<int16_t>(TaskConfig::VT_TASK_TYPE, static_cast<int16_t>(task_type), 0);
  }
  void add_arch_config_sha256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> arch_config_sha256) {
    fbb_.AddOffset(TaskConfig::VT_ARCH_CONFIG_SHA256, arch_config_sha256);
  }
  void add_dataset_sha256(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256) {
    fbb_.AddOffset(TaskConfig::VT_DATASET_SHA256, dataset_sha256);
  }
  void add_pub_root_rand_seed(int64_t pub_root_rand_seed) {
    fbb_.AddElement<int64_t>(TaskConfig::VT_PUB_ROOT_RAND_SEED, pub_root_rand_seed, 0);
  }
  explicit TaskConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TaskConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TaskConfig>(end);
    fbb_.Required(o, TaskConfig::VT_ARCH_CONFIG_SHA256);
    fbb_.Required(o, TaskConfig::VT_DATASET_SHA256);
    return o;
  }
};

inline flatbuffers::Offset<TaskConfig> CreateTaskConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    EnumSecurityType security_type = EnumSecurityType_integrity,
    EnumComputationTaskType task_type = EnumComputationTaskType_training,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> arch_config_sha256 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dataset_sha256 = 0,
    int64_t pub_root_rand_seed = 0) {
  TaskConfigBuilder builder_(_fbb);
  builder_.add_pub_root_rand_seed(pub_root_rand_seed);
  builder_.add_dataset_sha256(dataset_sha256);
  builder_.add_arch_config_sha256(arch_config_sha256);
  builder_.add_task_type(task_type);
  builder_.add_security_type(security_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<TaskConfig> CreateTaskConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    EnumSecurityType security_type = EnumSecurityType_integrity,
    EnumComputationTaskType task_type = EnumComputationTaskType_training,
    const std::vector<uint8_t> *arch_config_sha256 = nullptr,
    const std::vector<uint8_t> *dataset_sha256 = nullptr,
    int64_t pub_root_rand_seed = 0) {
  auto arch_config_sha256__ = arch_config_sha256 ? _fbb.CreateVector<uint8_t>(*arch_config_sha256) : 0;
  auto dataset_sha256__ = dataset_sha256 ? _fbb.CreateVector<uint8_t>(*dataset_sha256) : 0;
  return CreateTaskConfig(
      _fbb,
      security_type,
      task_type,
      arch_config_sha256__,
      dataset_sha256__,
      pub_root_rand_seed);
}

inline const TaskConfig *GetTaskConfig(const void *buf) {
  return flatbuffers::GetRoot<TaskConfig>(buf);
}

inline const TaskConfig *GetSizePrefixedTaskConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<TaskConfig>(buf);
}

inline TaskConfig *GetMutableTaskConfig(void *buf) {
  return flatbuffers::GetMutableRoot<TaskConfig>(buf);
}

inline TaskConfig *GetMutableSizePrefixedTaskConfig(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<TaskConfig>(buf);
}

inline bool VerifyTaskConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TaskConfig>(nullptr);
}

inline bool VerifySizePrefixedTaskConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TaskConfig>(nullptr);
}

inline void FinishTaskConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TaskConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTaskConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TaskConfig> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TASKCONFIG_H_
