// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGNEDECC_H_
#define FLATBUFFERS_GENERATED_SIGNEDECC_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct SignedECC;
struct SignedECCBuilder;

struct SignedECC FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SignedECCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4,
    VT_SIGNATURE = 6
  };
  const flatbuffers::Vector<uint8_t> *content() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  flatbuffers::Vector<uint8_t> *mutable_content() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  flatbuffers::Vector<uint8_t> *mutable_signature() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CONTENT) &&
           verifier.VerifyVector(content()) &&
           VerifyOffsetRequired(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           verifier.EndTable();
  }
};

struct SignedECCBuilder {
  typedef SignedECC Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content) {
    fbb_.AddOffset(SignedECC::VT_CONTENT, content);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(SignedECC::VT_SIGNATURE, signature);
  }
  explicit SignedECCBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SignedECC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignedECC>(end);
    fbb_.Required(o, SignedECC::VT_CONTENT);
    fbb_.Required(o, SignedECC::VT_SIGNATURE);
    return o;
  }
};

inline flatbuffers::Offset<SignedECC> CreateSignedECC(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0) {
  SignedECCBuilder builder_(_fbb);
  builder_.add_signature(signature);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignedECC> CreateSignedECCDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *content = nullptr,
    const std::vector<uint8_t> *signature = nullptr) {
  auto content__ = content ? _fbb.CreateVector<uint8_t>(*content) : 0;
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  return CreateSignedECC(
      _fbb,
      content__,
      signature__);
}

inline const SignedECC *GetSignedECC(const void *buf) {
  return flatbuffers::GetRoot<SignedECC>(buf);
}

inline const SignedECC *GetSizePrefixedSignedECC(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SignedECC>(buf);
}

inline SignedECC *GetMutableSignedECC(void *buf) {
  return flatbuffers::GetMutableRoot<SignedECC>(buf);
}

inline SignedECC *GetMutableSizePrefixedSignedECC(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<SignedECC>(buf);
}

inline bool VerifySignedECCBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SignedECC>(nullptr);
}

inline bool VerifySizePrefixedSignedECCBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SignedECC>(nullptr);
}

inline void FinishSignedECCBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SignedECC> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSignedECCBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SignedECC> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SIGNEDECC_H_
