// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGNEDECC_H_
#define FLATBUFFERS_GENERATED_SIGNEDECC_H_

#include "flatbuffers/flatbuffers.h"

struct SignedECC;
struct SignedECCT;

inline const flatbuffers::TypeTable *SignedECCTypeTable();

struct SignedECCT : public flatbuffers::NativeTable {
  typedef SignedECC TableType;
  std::vector<uint8_t> content;
  std::vector<uint8_t> signature;
  SignedECCT() {
  }
};

struct SignedECC FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SignedECCT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SignedECCTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4,
    VT_SIGNATURE = 6
  };
  const flatbuffers::Vector<uint8_t> *content() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  flatbuffers::Vector<uint8_t> *mutable_content() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  flatbuffers::Vector<uint8_t> *mutable_signature() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CONTENT) &&
           verifier.VerifyVector(content()) &&
           VerifyOffsetRequired(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           verifier.EndTable();
  }
  SignedECCT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SignedECCT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SignedECC> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SignedECCT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SignedECCBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content) {
    fbb_.AddOffset(SignedECC::VT_CONTENT, content);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(SignedECC::VT_SIGNATURE, signature);
  }
  explicit SignedECCBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SignedECCBuilder &operator=(const SignedECCBuilder &);
  flatbuffers::Offset<SignedECC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignedECC>(end);
    fbb_.Required(o, SignedECC::VT_CONTENT);
    fbb_.Required(o, SignedECC::VT_SIGNATURE);
    return o;
  }
};

inline flatbuffers::Offset<SignedECC> CreateSignedECC(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0) {
  SignedECCBuilder builder_(_fbb);
  builder_.add_signature(signature);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignedECC> CreateSignedECCDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *content = nullptr,
    const std::vector<uint8_t> *signature = nullptr) {
  auto content__ = content ? _fbb.CreateVector<uint8_t>(*content) : 0;
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  return CreateSignedECC(
      _fbb,
      content__,
      signature__);
}

flatbuffers::Offset<SignedECC> CreateSignedECC(flatbuffers::FlatBufferBuilder &_fbb, const SignedECCT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SignedECCT *SignedECC::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new SignedECCT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void SignedECC::UnPackTo(SignedECCT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = content(); if (_e) { _o->content.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->content[_i] = _e->Get(_i); } } }
  { auto _e = signature(); if (_e) { _o->signature.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->signature[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<SignedECC> SignedECC::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SignedECCT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSignedECC(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SignedECC> CreateSignedECC(flatbuffers::FlatBufferBuilder &_fbb, const SignedECCT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SignedECCT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _content = _fbb.CreateVector(_o->content);
  auto _signature = _fbb.CreateVector(_o->signature);
  return CreateSignedECC(
      _fbb,
      _content,
      _signature);
}

inline const flatbuffers::TypeTable *SignedECCTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const SignedECC *GetSignedECC(const void *buf) {
  return flatbuffers::GetRoot<SignedECC>(buf);
}

inline const SignedECC *GetSizePrefixedSignedECC(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SignedECC>(buf);
}

inline SignedECC *GetMutableSignedECC(void *buf) {
  return flatbuffers::GetMutableRoot<SignedECC>(buf);
}

inline bool VerifySignedECCBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SignedECC>(nullptr);
}

inline bool VerifySizePrefixedSignedECCBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SignedECC>(nullptr);
}

inline void FinishSignedECCBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SignedECC> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSignedECCBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SignedECC> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<SignedECCT> UnPackSignedECC(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<SignedECCT>(GetSignedECC(buf)->UnPack(res));
}

inline std::unique_ptr<SignedECCT> UnPackSizePrefixedSignedECC(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<SignedECCT>(GetSizePrefixedSignedECC(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_SIGNEDECC_H_
