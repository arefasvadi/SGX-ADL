// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CMAC128_H_
#define FLATBUFFERS_GENERATED_CMAC128_H_

#include "flatbuffers/flatbuffers.h"

struct CMAC128Auth;
struct CMAC128AuthT;

inline const flatbuffers::TypeTable *CMAC128AuthTypeTable();

struct CMAC128AuthT : public flatbuffers::NativeTable {
  typedef CMAC128Auth TableType;
  std::vector<uint8_t> content;
  std::vector<uint8_t> aad;
  std::vector<uint8_t> mac;
  CMAC128AuthT() {
  }
};

struct CMAC128Auth FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CMAC128AuthT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CMAC128AuthTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4,
    VT_AAD = 6,
    VT_MAC = 8
  };
  const flatbuffers::Vector<uint8_t> *content() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  flatbuffers::Vector<uint8_t> *mutable_content() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  const flatbuffers::Vector<uint8_t> *aad() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_AAD);
  }
  flatbuffers::Vector<uint8_t> *mutable_aad() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_AAD);
  }
  const flatbuffers::Vector<uint8_t> *mac() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MAC);
  }
  flatbuffers::Vector<uint8_t> *mutable_mac() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_MAC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CONTENT) &&
           verifier.VerifyVector(content()) &&
           VerifyOffsetRequired(verifier, VT_AAD) &&
           verifier.VerifyVector(aad()) &&
           VerifyOffsetRequired(verifier, VT_MAC) &&
           verifier.VerifyVector(mac()) &&
           verifier.EndTable();
  }
  CMAC128AuthT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CMAC128AuthT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CMAC128Auth> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CMAC128AuthT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CMAC128AuthBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content) {
    fbb_.AddOffset(CMAC128Auth::VT_CONTENT, content);
  }
  void add_aad(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aad) {
    fbb_.AddOffset(CMAC128Auth::VT_AAD, aad);
  }
  void add_mac(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> mac) {
    fbb_.AddOffset(CMAC128Auth::VT_MAC, mac);
  }
  explicit CMAC128AuthBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CMAC128AuthBuilder &operator=(const CMAC128AuthBuilder &);
  flatbuffers::Offset<CMAC128Auth> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CMAC128Auth>(end);
    fbb_.Required(o, CMAC128Auth::VT_CONTENT);
    fbb_.Required(o, CMAC128Auth::VT_AAD);
    fbb_.Required(o, CMAC128Auth::VT_MAC);
    return o;
  }
};

inline flatbuffers::Offset<CMAC128Auth> CreateCMAC128Auth(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aad = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> mac = 0) {
  CMAC128AuthBuilder builder_(_fbb);
  builder_.add_mac(mac);
  builder_.add_aad(aad);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<CMAC128Auth> CreateCMAC128AuthDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *content = nullptr,
    const std::vector<uint8_t> *aad = nullptr,
    const std::vector<uint8_t> *mac = nullptr) {
  auto content__ = content ? _fbb.CreateVector<uint8_t>(*content) : 0;
  auto aad__ = aad ? _fbb.CreateVector<uint8_t>(*aad) : 0;
  auto mac__ = mac ? _fbb.CreateVector<uint8_t>(*mac) : 0;
  return CreateCMAC128Auth(
      _fbb,
      content__,
      aad__,
      mac__);
}

flatbuffers::Offset<CMAC128Auth> CreateCMAC128Auth(flatbuffers::FlatBufferBuilder &_fbb, const CMAC128AuthT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CMAC128AuthT *CMAC128Auth::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CMAC128AuthT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void CMAC128Auth::UnPackTo(CMAC128AuthT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = content(); if (_e) { _o->content.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->content[_i] = _e->Get(_i); } } }
  { auto _e = aad(); if (_e) { _o->aad.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->aad[_i] = _e->Get(_i); } } }
  { auto _e = mac(); if (_e) { _o->mac.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->mac[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<CMAC128Auth> CMAC128Auth::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CMAC128AuthT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCMAC128Auth(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CMAC128Auth> CreateCMAC128Auth(flatbuffers::FlatBufferBuilder &_fbb, const CMAC128AuthT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CMAC128AuthT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _content = _fbb.CreateVector(_o->content);
  auto _aad = _fbb.CreateVector(_o->aad);
  auto _mac = _fbb.CreateVector(_o->mac);
  return CreateCMAC128Auth(
      _fbb,
      _content,
      _aad,
      _mac);
}

inline const flatbuffers::TypeTable *CMAC128AuthTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_CMAC128_H_
