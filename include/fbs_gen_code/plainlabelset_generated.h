// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINLABELSET_H_
#define FLATBUFFERS_GENERATED_PLAINLABELSET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "plainlabel_generated.h"

struct PlainLabelSet;
struct PlainLabelSetBuilder;

struct PlainLabelSet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainLabelSetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<PlainLabel>> *images() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PlainLabel>> *>(VT_IMAGES);
  }
  flatbuffers::Vector<flatbuffers::Offset<PlainLabel>> *mutable_images() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<PlainLabel>> *>(VT_IMAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IMAGES) &&
           verifier.VerifyVector(images()) &&
           verifier.VerifyVectorOfTables(images()) &&
           verifier.EndTable();
  }
};

struct PlainLabelSetBuilder {
  typedef PlainLabelSet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_images(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PlainLabel>>> images) {
    fbb_.AddOffset(PlainLabelSet::VT_IMAGES, images);
  }
  explicit PlainLabelSetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlainLabelSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainLabelSet>(end);
    fbb_.Required(o, PlainLabelSet::VT_IMAGES);
    return o;
  }
};

inline flatbuffers::Offset<PlainLabelSet> CreatePlainLabelSet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PlainLabel>>> images = 0) {
  PlainLabelSetBuilder builder_(_fbb);
  builder_.add_images(images);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlainLabelSet> CreatePlainLabelSetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<PlainLabel>> *images = nullptr) {
  auto images__ = images ? _fbb.CreateVector<flatbuffers::Offset<PlainLabel>>(*images) : 0;
  return CreatePlainLabelSet(
      _fbb,
      images__);
}

inline const PlainLabelSet *GetPlainLabelSet(const void *buf) {
  return flatbuffers::GetRoot<PlainLabelSet>(buf);
}

inline const PlainLabelSet *GetSizePrefixedPlainLabelSet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainLabelSet>(buf);
}

inline PlainLabelSet *GetMutablePlainLabelSet(void *buf) {
  return flatbuffers::GetMutableRoot<PlainLabelSet>(buf);
}

inline PlainLabelSet *GetMutableSizePrefixedPlainLabelSet(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<PlainLabelSet>(buf);
}

inline bool VerifyPlainLabelSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainLabelSet>(nullptr);
}

inline bool VerifySizePrefixedPlainLabelSetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainLabelSet>(nullptr);
}

inline void FinishPlainLabelSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainLabelSet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainLabelSetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainLabelSet> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PLAINLABELSET_H_
