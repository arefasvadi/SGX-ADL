// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINIMAGE_H_
#define FLATBUFFERS_GENERATED_PLAINIMAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct PlainImage;
struct PlainImageBuilder;

struct PlainImage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMG_CONTENT = 4
  };
  const flatbuffers::Vector<float> *img_content() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_IMG_CONTENT);
  }
  flatbuffers::Vector<float> *mutable_img_content() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_IMG_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IMG_CONTENT) &&
           verifier.VerifyVector(img_content()) &&
           verifier.EndTable();
  }
};

struct PlainImageBuilder {
  typedef PlainImage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_img_content(flatbuffers::Offset<flatbuffers::Vector<float>> img_content) {
    fbb_.AddOffset(PlainImage::VT_IMG_CONTENT, img_content);
  }
  explicit PlainImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlainImage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImage>(end);
    fbb_.Required(o, PlainImage::VT_IMG_CONTENT);
    return o;
  }
};

inline flatbuffers::Offset<PlainImage> CreatePlainImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> img_content = 0) {
  PlainImageBuilder builder_(_fbb);
  builder_.add_img_content(img_content);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlainImage> CreatePlainImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *img_content = nullptr) {
  auto img_content__ = img_content ? _fbb.CreateVector<float>(*img_content) : 0;
  return CreatePlainImage(
      _fbb,
      img_content__);
}

inline const PlainImage *GetPlainImage(const void *buf) {
  return flatbuffers::GetRoot<PlainImage>(buf);
}

inline const PlainImage *GetSizePrefixedPlainImage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainImage>(buf);
}

inline PlainImage *GetMutablePlainImage(void *buf) {
  return flatbuffers::GetMutableRoot<PlainImage>(buf);
}

inline PlainImage *GetMutableSizePrefixedPlainImage(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<PlainImage>(buf);
}

inline bool VerifyPlainImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainImage>(nullptr);
}

inline bool VerifySizePrefixedPlainImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainImage>(nullptr);
}

inline void FinishPlainImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImage> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PLAINIMAGE_H_
