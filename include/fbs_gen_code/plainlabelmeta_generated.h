// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINLABELMETA_H_
#define FLATBUFFERS_GENERATED_PLAINLABELMETA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

struct PlainLabelMeta;
struct PlainLabelMetaBuilder;

struct PlainLabelMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainLabelMetaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMCLASSES = 4
  };
  int32_t numClasses() const {
    return GetField<int32_t>(VT_NUMCLASSES, 0);
  }
  bool mutate_numClasses(int32_t _numClasses = 0) {
    return SetField<int32_t>(VT_NUMCLASSES, _numClasses, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUMCLASSES, 4) &&
           verifier.EndTable();
  }
};

struct PlainLabelMetaBuilder {
  typedef PlainLabelMeta Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_numClasses(int32_t numClasses) {
    fbb_.AddElement<int32_t>(PlainLabelMeta::VT_NUMCLASSES, numClasses, 0);
  }
  explicit PlainLabelMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlainLabelMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainLabelMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlainLabelMeta> CreatePlainLabelMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t numClasses = 0) {
  PlainLabelMetaBuilder builder_(_fbb);
  builder_.add_numClasses(numClasses);
  return builder_.Finish();
}

inline const PlainLabelMeta *GetPlainLabelMeta(const void *buf) {
  return flatbuffers::GetRoot<PlainLabelMeta>(buf);
}

inline const PlainLabelMeta *GetSizePrefixedPlainLabelMeta(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainLabelMeta>(buf);
}

inline PlainLabelMeta *GetMutablePlainLabelMeta(void *buf) {
  return flatbuffers::GetMutableRoot<PlainLabelMeta>(buf);
}

inline PlainLabelMeta *GetMutableSizePrefixedPlainLabelMeta(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<PlainLabelMeta>(buf);
}

inline bool VerifyPlainLabelMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainLabelMeta>(nullptr);
}

inline bool VerifySizePrefixedPlainLabelMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainLabelMeta>(nullptr);
}

inline void FinishPlainLabelMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainLabelMeta> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainLabelMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainLabelMeta> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PLAINLABELMETA_H_
