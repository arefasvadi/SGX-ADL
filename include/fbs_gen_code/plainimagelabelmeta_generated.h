// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINIMAGELABELMETA_H_
#define FLATBUFFERS_GENERATED_PLAINIMAGELABELMETA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

#include "plainimagemeta_generated.h"
#include "plainlabelmeta_generated.h"

struct PlainImageLabelMeta;
struct PlainImageLabelMetaBuilder;

struct PlainImageLabelMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainImageLabelMetaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGE_META = 4,
    VT_LABEL_META = 6
  };
  const PlainImageMeta *image_meta() const {
    return GetPointer<const PlainImageMeta *>(VT_IMAGE_META);
  }
  PlainImageMeta *mutable_image_meta() {
    return GetPointer<PlainImageMeta *>(VT_IMAGE_META);
  }
  const PlainLabelMeta *label_meta() const {
    return GetPointer<const PlainLabelMeta *>(VT_LABEL_META);
  }
  PlainLabelMeta *mutable_label_meta() {
    return GetPointer<PlainLabelMeta *>(VT_LABEL_META);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IMAGE_META) &&
           verifier.VerifyTable(image_meta()) &&
           VerifyOffset(verifier, VT_LABEL_META) &&
           verifier.VerifyTable(label_meta()) &&
           verifier.EndTable();
  }
};

struct PlainImageLabelMetaBuilder {
  typedef PlainImageLabelMeta Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_image_meta(flatbuffers::Offset<PlainImageMeta> image_meta) {
    fbb_.AddOffset(PlainImageLabelMeta::VT_IMAGE_META, image_meta);
  }
  void add_label_meta(flatbuffers::Offset<PlainLabelMeta> label_meta) {
    fbb_.AddOffset(PlainImageLabelMeta::VT_LABEL_META, label_meta);
  }
  explicit PlainImageLabelMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlainImageLabelMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainImageLabelMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlainImageLabelMeta> CreatePlainImageLabelMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<PlainImageMeta> image_meta = 0,
    flatbuffers::Offset<PlainLabelMeta> label_meta = 0) {
  PlainImageLabelMetaBuilder builder_(_fbb);
  builder_.add_label_meta(label_meta);
  builder_.add_image_meta(image_meta);
  return builder_.Finish();
}

inline const PlainImageLabelMeta *GetPlainImageLabelMeta(const void *buf) {
  return flatbuffers::GetRoot<PlainImageLabelMeta>(buf);
}

inline const PlainImageLabelMeta *GetSizePrefixedPlainImageLabelMeta(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainImageLabelMeta>(buf);
}

inline PlainImageLabelMeta *GetMutablePlainImageLabelMeta(void *buf) {
  return flatbuffers::GetMutableRoot<PlainImageLabelMeta>(buf);
}

inline PlainImageLabelMeta *GetMutableSizePrefixedPlainImageLabelMeta(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<PlainImageLabelMeta>(buf);
}

inline bool VerifyPlainImageLabelMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainImageLabelMeta>(nullptr);
}

inline bool VerifySizePrefixedPlainImageLabelMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainImageLabelMeta>(nullptr);
}

inline void FinishPlainImageLabelMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImageLabelMeta> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainImageLabelMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainImageLabelMeta> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PLAINIMAGELABELMETA_H_
