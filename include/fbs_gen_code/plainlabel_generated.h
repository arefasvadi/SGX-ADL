// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAINLABEL_H_
#define FLATBUFFERS_GENERATED_PLAINLABEL_H_

#include "flatbuffers/flatbuffers.h"

struct PlainLabel;
struct PlainLabelT;

inline const flatbuffers::TypeTable *PlainLabelTypeTable();

struct PlainLabelT : public flatbuffers::NativeTable {
  typedef PlainLabel TableType;
  std::vector<float> label_content;
  PlainLabelT() {
  }
};

struct PlainLabel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlainLabelT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PlainLabelTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LABEL_CONTENT = 4
  };
  const flatbuffers::Vector<float> *label_content() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_LABEL_CONTENT);
  }
  flatbuffers::Vector<float> *mutable_label_content() {
    return GetPointer<flatbuffers::Vector<float> *>(VT_LABEL_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LABEL_CONTENT) &&
           verifier.VerifyVector(label_content()) &&
           verifier.EndTable();
  }
  PlainLabelT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlainLabelT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PlainLabel> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlainLabelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_label_content(flatbuffers::Offset<flatbuffers::Vector<float>> label_content) {
    fbb_.AddOffset(PlainLabel::VT_LABEL_CONTENT, label_content);
  }
  explicit PlainLabelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlainLabelBuilder &operator=(const PlainLabelBuilder &);
  flatbuffers::Offset<PlainLabel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlainLabel>(end);
    fbb_.Required(o, PlainLabel::VT_LABEL_CONTENT);
    return o;
  }
};

inline flatbuffers::Offset<PlainLabel> CreatePlainLabel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> label_content = 0) {
  PlainLabelBuilder builder_(_fbb);
  builder_.add_label_content(label_content);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlainLabel> CreatePlainLabelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *label_content = nullptr) {
  auto label_content__ = label_content ? _fbb.CreateVector<float>(*label_content) : 0;
  return CreatePlainLabel(
      _fbb,
      label_content__);
}

flatbuffers::Offset<PlainLabel> CreatePlainLabel(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PlainLabelT *PlainLabel::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PlainLabelT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PlainLabel::UnPackTo(PlainLabelT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = label_content(); if (_e) { _o->label_content.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->label_content[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<PlainLabel> PlainLabel::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlainLabel(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PlainLabel> CreatePlainLabel(flatbuffers::FlatBufferBuilder &_fbb, const PlainLabelT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PlainLabelT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _label_content = _fbb.CreateVector(_o->label_content);
  return CreatePlainLabel(
      _fbb,
      _label_content);
}

inline const flatbuffers::TypeTable *PlainLabelTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_FLOAT, 1, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const PlainLabel *GetPlainLabel(const void *buf) {
  return flatbuffers::GetRoot<PlainLabel>(buf);
}

inline const PlainLabel *GetSizePrefixedPlainLabel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlainLabel>(buf);
}

inline PlainLabel *GetMutablePlainLabel(void *buf) {
  return flatbuffers::GetMutableRoot<PlainLabel>(buf);
}

inline bool VerifyPlainLabelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlainLabel>(nullptr);
}

inline bool VerifySizePrefixedPlainLabelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlainLabel>(nullptr);
}

inline void FinishPlainLabelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainLabel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlainLabelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlainLabel> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<PlainLabelT> UnPackPlainLabel(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PlainLabelT>(GetPlainLabel(buf)->UnPack(res));
}

inline std::unique_ptr<PlainLabelT> UnPackSizePrefixedPlainLabel(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PlainLabelT>(GetSizePrefixedPlainLabel(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_PLAINLABEL_H_
