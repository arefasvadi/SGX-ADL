// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENUMS_H_
#define FLATBUFFERS_GENERATED_ENUMS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 11 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

enum EnumSecurityType : int16_t {
  EnumSecurityType_integrity = 0,
  EnumSecurityType_privacy_integrity = 1,
  EnumSecurityType_MIN = EnumSecurityType_integrity,
  EnumSecurityType_MAX = EnumSecurityType_privacy_integrity
};

inline const EnumSecurityType (&EnumValuesEnumSecurityType())[2] {
  static const EnumSecurityType values[] = {
    EnumSecurityType_integrity,
    EnumSecurityType_privacy_integrity
  };
  return values;
}

inline const char * const *EnumNamesEnumSecurityType() {
  static const char * const names[3] = {
    "integrity",
    "privacy_integrity",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnumSecurityType(EnumSecurityType e) {
  if (flatbuffers::IsOutRange(e, EnumSecurityType_integrity, EnumSecurityType_privacy_integrity)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEnumSecurityType()[index];
}

enum EnumComputationTaskType : int16_t {
  EnumComputationTaskType_training = 0,
  EnumComputationTaskType_prediction = 1,
  EnumComputationTaskType_MIN = EnumComputationTaskType_training,
  EnumComputationTaskType_MAX = EnumComputationTaskType_prediction
};

inline const EnumComputationTaskType (&EnumValuesEnumComputationTaskType())[2] {
  static const EnumComputationTaskType values[] = {
    EnumComputationTaskType_training,
    EnumComputationTaskType_prediction
  };
  return values;
}

inline const char * const *EnumNamesEnumComputationTaskType() {
  static const char * const names[3] = {
    "training",
    "prediction",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnumComputationTaskType(EnumComputationTaskType e) {
  if (flatbuffers::IsOutRange(e, EnumComputationTaskType_training, EnumComputationTaskType_prediction)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEnumComputationTaskType()[index];
}

#endif  // FLATBUFFERS_GENERATED_ENUMS_H_
