Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c ...
Defines: 
Includes: -I/home/aref/projects/SGX-DDL/trusted/ -I/home/aref/projects/SGX-DDL/trusted/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/tlibc/
Platform:Native
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: _TLIBC_WARN_DEPRECATED_FUNCTIONS_...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: _WCHAR_T_DEFINED_...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __GNUC_MINOR_;__GNUC__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __GNUC__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __STDC__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __WCHAR_MAX__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __WCHAR_MIN__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __i386__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: __x86_64__...
Checking /home/aref/projects/SGX-DDL/trusted/enclave_t.c: linux...
1/6 files checked 16% done
Checking /home/aref/projects/SGX-DDL/untrusted/src/app.cpp ...
Defines: DEBUG=1
Includes: -I/home/aref/projects/SGX-DDL/untrusted/ -I/home/aref/projects/SGX-DDL/untrusted/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/
Platform:Native
Checking /home/aref/projects/SGX-DDL/untrusted/src/app.cpp: DEBUG=1;DEBUG=1...
[/home/aref/projects/SGX-DDL/untrusted/src/app.cpp:79] -> [/home/aref/projects/SGX-DDL/untrusted/src/app.cpp:84]: (style) Variable 'ret' is reassigned a value before the old one has been used.
[/home/aref/projects/SGX-DDL/untrusted/src/app.cpp:134] -> [/home/aref/projects/SGX-DDL/untrusted/src/app.cpp:135]: (style) Variable 'ret' is reassigned a value before the old one has been used.
[/home/aref/projects/SGX-DDL/untrusted/include/CryptoEngine.hpp:113]: (style) Variable 'ret_val' is assigned a value that is never used.
2/6 files checked 33% done
Checking /home/aref/projects/SGX-DDL/untrusted/enclave_u.c ...
Defines: DEBUG=1
Includes: -I/home/aref/projects/SGX-DDL/untrusted/ -I/home/aref/projects/SGX-DDL/untrusted/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/
Platform:Native
Checking /home/aref/projects/SGX-DDL/untrusted/enclave_u.c: DEBUG=1;DEBUG=1...
3/6 files checked 50% done
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp ...
Defines: 
Includes: -I/home/aref/projects/SGX-DDL/trusted/ -I/home/aref/projects/SGX-DDL/trusted/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/libcxx/ -I/opt/intel/sgx-2.2/sgxsdk/include/tlibc/
Platform:Native
[/home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp]: (information) The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _AIX;__sun__...
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/type_traits:395]: (error) syntax error
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _LIBCPP_ALTERNATE_STRING_LAYOUT;__APPLE__;__arm__;__i386__;__x86_64__;__clang__...
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:90]: (style) Assignment of function parameter has no effect outside the function.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:91]: (style) Assignment of function parameter has no effect outside the function.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:100]: (style) Assignment of function parameter has no effect outside the function.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:101]: (style) Assignment of function parameter has no effect outside the function.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:110]: (style) Assignment of function parameter has no effect outside the function.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:121]: (style) Assignment of function parameter has no effect outside the function.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:250]: (style) The condition '!is_lvalue_reference<_Hp>::value || is_lvalue_reference<_Hp>::value && is_lvalue_reference<_Tp>::value||is_same<remove_reference<_Tp>::type,reference_wrapper<remove_reference<_Hp>::type>>::value' is equivalent to '!is_lvalue_reference<_Hp>::value || is_lvalue_reference<_Tp>::value||is_same<remove_reference<_Tp>::type,reference_wrapper<remove_reference<_Hp>::type>>::value'.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:264]: (style) The condition '!is_lvalue_reference<_Hp>::value || is_lvalue_reference<_Hp>::value && is_lvalue_reference<_Tp>::value||is_same<remove_reference<_Tp>::type,reference_wrapper<remove_reference<_Hp>::type>>::value' is equivalent to '!is_lvalue_reference<_Hp>::value || is_lvalue_reference<_Tp>::value||is_same<remove_reference<_Tp>::type,reference_wrapper<remove_reference<_Hp>::type>>::value'.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:278]: (style) The condition '!is_lvalue_reference<_Hp>::value || is_lvalue_reference<_Hp>::value && is_lvalue_reference<_Tp>::value||is_same<remove_reference<_Tp>::type,reference_wrapper<remove_reference<_Hp>::type>>::value' is equivalent to '!is_lvalue_reference<_Hp>::value || is_lvalue_reference<_Tp>::value||is_same<remove_reference<_Tp>::type,reference_wrapper<remove_reference<_Hp>::type>>::value'.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:1165]: (style) Variable '__idx' is assigned a value that is never used.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/algorithm:2801]: (performance) Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/stdexcept:55]: (style) The class '__libcpp_refstring' does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:1110]: (warning) Member variable '__bit_iterator::__ctz_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1593]: (warning) Member variable 'function::__buf_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1595]: (warning) Member variable 'function::__buf_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1665]: (warning) Member variable 'function::__buf_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1607]: (warning) Member variable 'function::__buf_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1610]: (warning) Member variable 'function::__buf_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1680]: (warning) Member variable 'function::__buf_' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1246]: (warning) Member variable 'std :: __1 :: __wrap_iter < _Tp * >::__i' is not initialized in the constructor.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/vector:345] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/vector:2138]: (warning) The class 'vector' defines member variable with name '__begin_' also defined in its parent class '__vector_base'.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/type_traits:1133]: (style) Struct '__any' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__functional_base:396]: (style) Class 'reference_wrapper' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:446]: (style) Struct '__tuple_impl' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:2030]: (style) Class 'auto_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:2622]: (style) Class 'unique_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:2668]: (style) Class 'unique_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:2808]: (style) Class 'unique_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3825]: (style) Class '__shared_ptr_emplace' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3903]: (style) Class 'shared_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3943]: (style) Class 'shared_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3952]: (style) Class 'shared_ptr' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/__bit_reference:141]: (style) Class '__bit_const_reference' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/vector:365]: (style) Class '__vector_base' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/vector:538]: (style) Class 'vector' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/vector:2203]: (style) Class 'vector' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1254]: (style) Class '__mem_fn' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1595]: (style) Class 'function' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1599]: (style) Class 'function' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/string:1403]: (style) Class 'std :: __1 :: basic_string < char , char_traits < char > , allocator < char > >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/string:1427]: (style) Class 'std :: __1 :: basic_string < char , char_traits < char > , allocator < char > >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:689]: (style) Class 'std :: __1 :: tuple < _Tp . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:765]: (style) Class 'std :: __1 :: tuple < _Tp . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:859]: (style) Class 'std :: __1 :: tuple < _Tp . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:689]: (style) Class 'std :: __1 :: tuple < _Args1 . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:765]: (style) Class 'std :: __1 :: tuple < _Args1 . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:859]: (style) Class 'std :: __1 :: tuple < _Args1 . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:689]: (style) Class 'std :: __1 :: tuple < _Args2 . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:765]: (style) Class 'std :: __1 :: tuple < _Args2 . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:859]: (style) Class 'std :: __1 :: tuple < _Args2 . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:689]: (style) Class 'std :: __1 :: tuple < _Args . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:765]: (style) Class 'std :: __1 :: tuple < _Args . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:859]: (style) Class 'std :: __1 :: tuple < _Args . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:689]: (style) Class 'std :: __1 :: tuple < _Up . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:765]: (style) Class 'std :: __1 :: tuple < _Up . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/tuple:859]: (style) Class 'std :: __1 :: tuple < _Up . . . >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1357]: (style) Class 'std :: __1 :: __wrap_iter < _Iter1 >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1357]: (style) Class 'std :: __1 :: __wrap_iter < _Iter2 >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1357]: (style) Class 'std :: __1 :: __wrap_iter < _Iter >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1357]: (style) Class 'std :: __1 :: __wrap_iter < _Tp * >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1357]: (style) Class 'std :: __1 :: __wrap_iter < std :: __1 :: allocator_traits < allocator < char > > :: pointer >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1357]: (style) Class 'std :: __1 :: __wrap_iter < std :: __1 :: allocator_traits < allocator < char > > :: const_pointer >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1057]: (style) Class 'std :: __1 :: move_iterator < iterator >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/iterator:1057]: (style) Class 'std :: __1 :: move_iterator < pointer >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/utility:359]: (style) Struct 'std :: __1 :: pair < _T1 , _T2 >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/utility:380]: (style) Struct 'std :: __1 :: pair < _T1 , _T2 >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/utility:380]: (style) Struct 'std :: __1 :: pair < _U1 , _U2 >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/type_traits:1343]: (style) Struct 'std :: __1 :: __is_base_of_imp :: _Dst < _Bp >' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:53]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:61]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/typeinfo:121]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/typeinfo:134]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:53] -> [/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/typeinfo:144]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/stdexcept:82]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/stdexcept:99]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/stdc++/linux/exception:40] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3703]: (style) The function 'what' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3759] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3776]: (style) The function '__get_deleter' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3717] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3780]: (style) The function '__on_zero_shared' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3762] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3781]: (style) The function '__on_zero_shared_weak' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3717] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3858]: (style) The function '__on_zero_shared' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3762] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/memory:3859]: (style) The function '__on_zero_shared_weak' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1446] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1483]: (style) The function 'destroy' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1447] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1484]: (style) The function 'destroy_deallocate' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1448] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1485]: (style) The function 'operator()' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1450] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1487]: (style) The function 'target' overrides a function in a base class but is not marked with a 'override' specifier.
[/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1451] -> [/opt/intel/sgx-2.2/sgxsdk/include/libcxx/functional:1488]: (style) The function 'target_type' overrides a function in a base class but is not marked with a 'override' specifier.
[/home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp:20]: (error) va_list 'ap' used before va_start() was called.
[/home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp:21]: (error) va_list 'ap' used before va_start() was called.
[/home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp:22]: (error) va_list 'ap' used before va_start() was called.
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _LIBCPP_HAS_MUSL_LIBC;__ANDROID__;__CloudABI__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _LIBCPP_HAS_MUSL_LIBC;__clang__;__linux__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _LIBCPP_HAS_NO_MONOTONIC_CLOCK;_LIBCPP_HAS_NO_THREADS...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _LIBCPP_HAS_NO_THREADS...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _LITTLE_ENDIAN;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _NEWLIB_VERSION;_WIN32;__ANDROID__;__LIBCPP_SGX;__APPLE__;__MACH__;__unix__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _STRING_H_CPLUSPLUS_98_CONFORMANCE_;__GLIBC__;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: _WIN32;__APPLE__;__CloudABI__;__FreeBSD__;__NetBSD__;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: __APPLE__...
Checking /home/aref/projects/SGX-DDL/trusted/src/enclave-app.cpp: __APPLE__;__FreeBSD__...
4/6 files checked 66% done
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp ...
Defines: 
Includes: -I/home/aref/projects/SGX-DDL/trusted/ -I/home/aref/projects/SGX-DDL/trusted/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/libcxx/ -I/opt/intel/sgx-2.2/sgxsdk/include/tlibc/
Platform:Native
[/home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp]: (information) The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _AIX;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _LIBCPP_ALTERNATE_STRING_LAYOUT;__APPLE__;__arm__;__i386__;__x86_64__;__clang__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _LIBCPP_HAS_MUSL_LIBC;__ANDROID__;__CloudABI__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _LIBCPP_HAS_MUSL_LIBC;__clang__;__linux__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _LIBCPP_HAS_NO_MONOTONIC_CLOCK;_LIBCPP_HAS_NO_THREADS...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _LIBCPP_HAS_NO_THREADS...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _LITTLE_ENDIAN;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _NEWLIB_VERSION;_WIN32;__ANDROID__;__LIBCPP_SGX;__APPLE__;__MACH__;__unix__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _STRING_H_CPLUSPLUS_98_CONFORMANCE_;__GLIBC__;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: _WIN32;__APPLE__;__CloudABI__;__FreeBSD__;__NetBSD__;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: __APPLE__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNConfigIO.cpp: __APPLE__;__FreeBSD__...
5/6 files checked 83% done
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp ...
Defines: 
Includes: -I/home/aref/projects/SGX-DDL/trusted/ -I/home/aref/projects/SGX-DDL/trusted/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/ -I/opt/intel/sgx-2.2/sgxsdk/include/libcxx/ -I/opt/intel/sgx-2.2/sgxsdk/include/tlibc/
Platform:Native
[/home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp]: (information) The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time.
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _AIX;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _LIBCPP_ALTERNATE_STRING_LAYOUT;__APPLE__;__arm__;__i386__;__x86_64__;__clang__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _LIBCPP_HAS_MUSL_LIBC;__ANDROID__;__CloudABI__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _LIBCPP_HAS_MUSL_LIBC;__clang__;__linux__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _LIBCPP_HAS_NO_MONOTONIC_CLOCK;_LIBCPP_HAS_NO_THREADS...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _LIBCPP_HAS_NO_THREADS...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _LITTLE_ENDIAN;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _NEWLIB_VERSION;_WIN32;__ANDROID__;__LIBCPP_SGX;__APPLE__;__MACH__;__unix__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _STRING_H_CPLUSPLUS_98_CONFORMANCE_;__GLIBC__;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: _WIN32;__APPLE__;__CloudABI__;__FreeBSD__;__NetBSD__;__sun__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: __APPLE__...
Checking /home/aref/projects/SGX-DDL/trusted/src/DNNTrainer.cpp: __APPLE__;__FreeBSD__...
6/6 files checked 100% done
(information) Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config.
