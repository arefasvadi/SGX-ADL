# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AESCTR128Enc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AESCTR128Enc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAESCTR128Enc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AESCTR128Enc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AESCTR128Enc
    def EncContent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AESCTR128Enc
    def EncContentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AESCTR128Enc
    def EncContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AESCTR128Enc
    def EncContentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # AESCTR128Enc
    def Iv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AESCTR128Enc
    def IvAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # AESCTR128Enc
    def IvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AESCTR128Enc
    def IvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def AESCTR128EncStart(builder): builder.StartObject(2)
def Start(builder):
    return AESCTR128EncStart(builder)
def AESCTR128EncAddEncContent(builder, encContent): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(encContent), 0)
def AddEncContent(builder, encContent):
    return AESCTR128EncAddEncContent(builder, encContent)
def AESCTR128EncStartEncContentVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartEncContentVector(builder, numElems):
    return AESCTR128EncStartEncContentVector(builder, numElems)
def AESCTR128EncAddIv(builder, iv): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iv), 0)
def AddIv(builder, iv):
    return AESCTR128EncAddIv(builder, iv)
def AESCTR128EncStartIvVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartIvVector(builder, numElems):
    return AESCTR128EncStartIvVector(builder, numElems)
def AESCTR128EncEnd(builder): return builder.EndObject()
def End(builder):
    return AESCTR128EncEnd(builder)