# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MultipleUnitParamSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMultipleUnitParamSet(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MultipleUnitParamSet()
        x.Init(buf, n + offset)
        return x

    # MultipleUnitParamSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MultipleUnitParamSet
    def TotalSections(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MultipleUnitParamSet
    def Sections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .SingleUnitParamSet import SingleUnitParamSet
            obj = SingleUnitParamSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MultipleUnitParamSet
    def SectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MultipleUnitParamSetStart(builder): builder.StartObject(2)
def MultipleUnitParamSetAddTotalSections(builder, totalSections): builder.PrependUint32Slot(0, totalSections, 0)
def MultipleUnitParamSetAddSections(builder, sections): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sections), 0)
def MultipleUnitParamSetStartSectionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MultipleUnitParamSetEnd(builder): return builder.EndObject()
