# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PlainImageLabelMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlainImageLabelMeta(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlainImageLabelMeta()
        x.Init(buf, n + offset)
        return x

    # PlainImageLabelMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlainImageLabelMeta
    def ImageMeta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PlainImageMeta import PlainImageMeta
            obj = PlainImageMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlainImageLabelMeta
    def LabelMeta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PlainLabelMeta import PlainLabelMeta
            obj = PlainLabelMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PlainImageLabelMetaStart(builder): builder.StartObject(2)
def PlainImageLabelMetaAddImageMeta(builder, imageMeta): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(imageMeta), 0)
def PlainImageLabelMetaAddLabelMeta(builder, labelMeta): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(labelMeta), 0)
def PlainImageLabelMetaEnd(builder): return builder.EndObject()
