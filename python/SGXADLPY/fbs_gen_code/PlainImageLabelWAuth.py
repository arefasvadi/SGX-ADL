# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PlainImageLabelWAuth(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlainImageLabelWAuth(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlainImageLabelWAuth()
        x.Init(buf, n + offset)
        return x

    # PlainImageLabelWAuth
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlainImageLabelWAuth
    def Pimglbl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PlainImageLabel import PlainImageLabel
            obj = PlainImageLabel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlainImageLabelWAuth
    def Aad(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # PlainImageLabelWAuth
    def AadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # PlainImageLabelWAuth
    def AadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlainImageLabelWAuth
    def Mac(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # PlainImageLabelWAuth
    def MacAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # PlainImageLabelWAuth
    def MacLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PlainImageLabelWAuthStart(builder): builder.StartObject(3)
def PlainImageLabelWAuthAddPimglbl(builder, pimglbl): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pimglbl), 0)
def PlainImageLabelWAuthAddAad(builder, aad): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(aad), 0)
def PlainImageLabelWAuthStartAadVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PlainImageLabelWAuthAddMac(builder, mac): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mac), 0)
def PlainImageLabelWAuthStartMacVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PlainImageLabelWAuthEnd(builder): return builder.EndObject()
