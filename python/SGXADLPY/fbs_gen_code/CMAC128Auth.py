# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CMAC128Auth(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCMAC128Auth(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CMAC128Auth()
        x.Init(buf, n + offset)
        return x

    # CMAC128Auth
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CMAC128Auth
    def Content(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CMAC128Auth
    def ContentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CMAC128Auth
    def ContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CMAC128Auth
    def Aad(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CMAC128Auth
    def AadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CMAC128Auth
    def AadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CMAC128Auth
    def Mac(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CMAC128Auth
    def MacAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CMAC128Auth
    def MacLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def CMAC128AuthStart(builder): builder.StartObject(3)
def CMAC128AuthAddContent(builder, content): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)
def CMAC128AuthStartContentVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CMAC128AuthAddAad(builder, aad): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(aad), 0)
def CMAC128AuthStartAadVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CMAC128AuthAddMac(builder, mac): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mac), 0)
def CMAC128AuthStartMacVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CMAC128AuthEnd(builder): return builder.EndObject()
