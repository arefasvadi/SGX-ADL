# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PlainImageMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlainImageMeta(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlainImageMeta()
        x.Init(buf, n + offset)
        return x

    # PlainImageMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlainImageMeta
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlainImageMeta
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlainImageMeta
    def Channels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PlainImageMetaStart(builder): builder.StartObject(3)
def PlainImageMetaAddWidth(builder, width): builder.PrependInt32Slot(0, width, 0)
def PlainImageMetaAddHeight(builder, height): builder.PrependInt32Slot(1, height, 0)
def PlainImageMetaAddChannels(builder, channels): builder.PrependInt32Slot(2, channels, 0)
def PlainImageMetaEnd(builder): return builder.EndObject()
